/* Generated By:JavaCC: Do not edit this line. PAParser.java */
package com.lowagie.text.pdf.codec.postscript;

import java.lang.*;
import java.lang.reflect.*;
import java.util.*;
import java.awt.*;
import java.awt.geom.*;
import java.awt.color.*;
import java.awt.font.*;
import java.io.*;
import java.net.URL;

public class PAParser extends Object implements PAParserConstants {

  void error_skipto(int kind) throws ParseException {
ParseException e=generateParseException();
Token t;
String dump="";
do{
if(getToken(1).kind==kind)break;
t=getNextToken();
dump+=t.image;
}while(t.kind!=kind);
System.out.println("Ignoriere >"+dump+"<");
  }

  String ExceptionString(String hint,JavaCharStream jj_input_stream,PAContext context,Token t,Exception e) throws ParseException {
  return "\nparser "+hint+" ["+jj_input_stream.bufpos+"]"+context.engine.litMode()+":\""+t.image+"\" in line "+t.beginLine+" column "+t.beginColumn+"\n"+e.toString();
  }

  final public void parse(PAContext context) throws ParseException {
        Token x = null;
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case KEY_IDENTIFIER:
        case IMMEDIATE_IDENTIFIER:
        case LBRACE:
        case RBRACE:
        case LBRACKET:
        case RBRACKET:
        case LDICT:
        case RDICT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case KEY_IDENTIFIER:
        case IMMEDIATE_IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            x = jj_consume_token(INTEGER_LITERAL);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser ["+jj_input_stream.bufpos+"]"+context.engine.litMode()+":\""+x.image+"\"");System.out.flush();System.err.flush();}}
                                        context.engine.process(new Integer(x.image));
                                } catch(NumberFormatException e) {
                                        {if (true) throw new ParseException(ExceptionString("int_literal",jj_input_stream,context,token,e));}
                                } catch(PainterException e) {
                                        {if (true) throw new ParseException(ExceptionString("int_literal",jj_input_stream,context,token,e));}
                                }
            break;
          case FLOATING_POINT_LITERAL:
            x = jj_consume_token(FLOATING_POINT_LITERAL);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser ["+jj_input_stream.bufpos+"]"+context.engine.litMode()+":\""+x.image+"\"");System.out.flush();System.err.flush();}}
                                       context.engine.process(new Double(x.image));
                                } catch(NumberFormatException e) {
                                        {if (true) throw new ParseException(ExceptionString("float_literal",jj_input_stream,context,token,e));}
                                } catch(PainterException e) {
                                        {if (true) throw new ParseException(ExceptionString("float_literal",jj_input_stream,context,token,e));}
                                }
            break;
          case STRING_LITERAL:
            x = jj_consume_token(STRING_LITERAL);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+x.image+"\"");System.out.flush();System.err.flush();}}
                                      context.engine.process(x.image.substring(1, x.image.length() -1));
                                } catch(PainterException e) {
                                      {if (true) throw new ParseException(ExceptionString("string_literal",jj_input_stream,context,token,e));}
                                 }
            break;
          case IDENTIFIER:
            x = jj_consume_token(IDENTIFIER);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+x.image+"\"");System.out.flush();System.err.flush();}}
                                              context.engine.process(new PAToken(x.image, PAToken.IDENTIFIER));
                                } catch(PainterException e) {
                                             {if (true) throw new ParseException(ExceptionString("identifier",jj_input_stream,context,token,e));}
                                }
            break;
          case KEY_IDENTIFIER:
            x = jj_consume_token(KEY_IDENTIFIER);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+x.image+"\"");System.out.flush();System.err.flush();}}
                                            context.engine.process(new PAToken(x.image.substring(1, x.image.length()), PAToken.KEY));
                                } catch(PainterException e) {
                                  {if (true) throw new ParseException(ExceptionString("key_identifier",jj_input_stream,context,token,e));}
                                 }
            break;
          case IMMEDIATE_IDENTIFIER:
            x = jj_consume_token(IMMEDIATE_IDENTIFIER);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+x.image+"\"");System.out.flush();System.err.flush();}}
                                            context.engine.process(new PAToken(x.image.substring(2, x.image.length()), PAToken.IMMEDIATE));
                                } catch(PainterException e) {
                                         {if (true) throw new ParseException(ExceptionString("immediate_identifier",jj_input_stream,context,token,e));}
                                }
            break;
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+token.image+"\"");System.out.flush();System.err.flush();}}
                                             context.engine.process(new PAToken(null, PAToken.START_PROCEDURE));
                                } catch(PainterException e) {
                                  {if (true) throw new ParseException(ExceptionString("lbrace",jj_input_stream,context,token,e));}
                                }
          break;
        case RBRACE:
          jj_consume_token(RBRACE);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+token.image+"\"");System.out.flush();System.err.flush();}}
                                      context.engine.process(new PAToken(null, PAToken.END_PROCEDURE));
                                } catch(PainterException e) {
                                  {if (true) throw new ParseException(ExceptionString("rbrace",jj_input_stream,context,token,e));}
                               }
          break;
        case LBRACKET:
          jj_consume_token(LBRACKET);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+token.image+"\"");System.out.flush();System.err.flush();}}
                                       context.engine.process(new PAToken(null, PAToken.START_ARRAY));
                                } catch(PainterException e) {
                                  {if (true) throw new ParseException(ExceptionString("lbracket",jj_input_stream,context,token,e));}
                                }
          break;
        case RBRACKET:
          jj_consume_token(RBRACKET);
                                try {
                                  {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+token.image+"\"");System.out.flush();System.err.flush();}}
                                       context.engine.process(new PAToken(null, PAToken.END_ARRAY));
                                } catch(PainterException e) {
                                  {if (true) throw new ParseException(ExceptionString("rbracket",jj_input_stream,context,token,e));}
                                }
          break;
        case LDICT:
          jj_consume_token(LDICT);
                               try {
                                 {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+token.image+"\"");System.out.flush();System.err.flush();}}
                                      context.engine.process(new PAToken(null, PAToken.START_DICT));
                               } catch(PainterException e) {
                                 {if (true) throw new ParseException(ExceptionString("ldict",jj_input_stream,context,token,e));}
                                }
          break;
        case RDICT:
          jj_consume_token(RDICT);
                               try {
                                 {if(PAContext.DebugExecution){System.out.print("\nparser "+context.engine.litMode()+":\""+token.image+"\"");System.out.flush();System.err.flush();}}
                                       context.engine.process(new PAToken(null, PAToken.END_DICT));
                               } catch(PainterException e) {
                                 {if (true) throw new ParseException(ExceptionString("rdict",jj_input_stream,context,token,e));}
                                 }
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
    System.out.flush();System.err.flush();
                  //System.out.println("Fehlerhaftes Element in Spalte "+e.currentToken.beginColumn+" in Eingabedatei in Zeile="+e.currentToken.next.beginLine+" in Zeichen Nr. "+e.currentToken.next.beginColumn+". >"+e.currentToken.next.image+"< wurde hier nicht erwartet.");
                  //System.err.println("Fehler:"+e);
                  e.printStackTrace();
                  error_skipto(WHITESPACE);
                  System.exit(0);
    }
  }

  public PAParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  final private int[] jj_la1_0 = {0x1f9e90,0x1e90,0x1f9e90,};

  public PAParser(java.io.InputStream stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public PAParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new PAParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public PAParser(PAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  public void ReInit(PAParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[21];
    for (int i = 0; i < 21; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
