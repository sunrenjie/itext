<?xml version="1.0" encoding="UTF-8" ?> 
<!-- $Header$ -->
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title>iText &amp; ANT</site:title>
		<site:summary>How-to use ANT to compile, download ant document iText.</site:summary>
		<site:keywords>PDF, JAVA, iText, download, compile, release, ANT, examples, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1930110588">Java Development With Ant</site:book>
			<site:book asin="0596001843">Ant: The Definitive Guide</site:book>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
	</site:metadata>
	<site:content>
	<div>
<div class="header">How I install my development environment for iText (ANT)</div>
In the previous pages, you learned how to get the most recent iText source code
(see <a href="svn.html">SVN</a>) and how to set up your development environment
(see <a href="eclipse.html">Eclipse</a>). Now we are going to use ANT to compile
and jar the library. We'll also use ANT to create the HTML pages for lowagie.com
and the tutorial pages. In other words: we'll create all the files necessary to
make a new iText release using ANT.<br />
For more info about ANT (A Neat Tool), go to <a href="http://ant.apache.org/">ANT site @ Apache.org</a>.
<div class="title">The iText ANT files</div>
Every self-respecting JAVA project has its <a href="build.xml">build.xml</a> file.
Sure, we have heard about Maven, but all sites built with Maven look exactly the same.
Moreover Maven is overkill for a project such as iText; why learn an obscure language
such as APT or mess with POMs, if ANT provides the same functionality in a much
easier way?<br />
Let's open our main <a href="build.xml">build.xml</a> in Eclipse
(you'll find it under the <code>src</code> directory in the <code>main</code> project):
<div class="figure"><img src="images/ant_targets.png" /></div>
<br />
In the outline panel, you'll see all the available targets;
the <code>help</code> target being the default target.
Execute the help target, and you'll find the output in the
<code>Console</code> panel:
<pre class="commandline">
Buildfile: C:\itext-core\main\src\build.xml
help:
     [echo] Using ANT for iText
help:
     [echo] COMPILING AND JARRING THE CODE (compile.xml)
     [echo] ant compile: compiles iText
     [echo] ant compile.debug: compiles iText and allows you to debug the code
     [echo] ant jar: compiles and jars iText
     [echo] ant jar.debug: compiles for debugging and jars iText
help:
     [echo] BUILDING THE iText SITE (site.xml)
     [echo] ant lowagie.com: Building the lowagie.com pages
     [echo] ant javadoc: Building the API documentation
     [echo] ant docs.tar.gz: Building and jarring the API documentation
     [echo] ant tutorial: creates the tutorial pages (without the examples)
     [echo] ant tutorial.tar.gz: creates the tutorial and makes tar.gz files
help:
     [echo] MAKING A NEW RELEASE (release.xml)
     [echo] archive.src: archiving the source (zip and tar.gz)
     [echo] asian.jar: creates a new version of iTextAsian.jar and iTextAsianCmaps.jar
     [echo] release: making the all the files needed for a release (except tutorial)
BUILD SUCCESSFUL
Total time: 375 milliseconds</pre>
Compare this list with the outline presented by Eclipse, and you'll discover that
the <code>help</code> target doesn't do anything but listing the available targets.<br />
These targets are organized in three groups, each referring to a subscript that can
be found in the <a href="ant/">ant</a> subdirectory: <code>c:/itext-core/main/src/ant/</code><br />
These subscripts have more targets than the ones made available through the main ant file <a href="build.xml">build.xml</a>,
but in general you won't need them. Please consider these targets to be 'private helper methods'.<br />
In the <a href="ant/">ant</a> subdirectory, you'll also find an <a href="ant/.ant.properties">.ant.properties</a>
file. I use this file every time I make a new release: it keeps the release number and date for the current or next release.<br />
You will only have to change it if the directory structure you're using on your system is different from mine.
No directory is used in a hardcoded way in the ANT scripts. All directories that are used,
are defined in this <a href="ant/.ant.properties">.ant.properties</a> file.<br />
Let's have a closer look at an overview of the 'public' targets in the main ant file, <a href="build.xml">build.xml</a>.

<div class="title">Compiling and jarring</div>
subscript: <a href="ant/compile.xml">compile.xml</a>

<div class="commandline">ant compile</div>
Compiles the sourcecode (i.e. the code in the src directory).

<div class="commandline">ant jar</div>
Calls compile, then jars the compiled code into iText.jar (in the directory <code>lib</code>)
<br /><br />
You can also use <span class="commandline">ant compile.debug</span> and <span class="commandline">ant jar.debug</span>
if you need extended debugging capabilities. Don't forget to remove your class files before you execute this target.

<div class="title">Creating the iText site</div>
subscript: <a href="ant/site.xml">site.xml</a><br />

<div class="commandline">ant lowagie.com</div>
Every page on the site and every tutorial chapter was written in XML
and is converted to HTML using XSLT. The target is self explanatory.

<div class="commandline">ant javadoc</div>
Creates the API documentation using JAVADOC. You can also immediately make
the docs.tar.gz with <span class="commandline">ant docs.tar.gz</span>.

<div class="commandline">ant tutorial</div>
Creates the tutorial pages (HTML only!)<br />
If you also want to compile and execute the example code,
you need <span class="commandline">ant tutorial.tar.gz</span>.
This will also create two tar.gz.files: one with the HTML,
another one with the source code and resulting documents (PDF, RTF,...).

<div class="title">Preparing a release</div>
subscript: <a href="ant/release.xml">release.xml</a><br />

<div class="commandline">ant archive.src</div>
Makes the src.zip and src.tar.gz file.

<div class="commandline">ant asian.jar</div>
This creates a zip (a jar is nothing more than a zipped archive)
with the files you need for CJK support (iTextAsian.jar) or advanced
Asian font support (iTextAsianCmaps.jar). Generally, you won't ever
need this target, because the files in these jars never change, and
the jars are stored in the SVN repository.

<div class="commandline">ant release</div>
This target calls many of the targets listed above:
archive.src, docs.tar.gz, jar, lowagie.com, and release.sf.
This last target is one of the 'private methods' mentioned before.
For every new release, I change the release number and date
in the <a href="ant/.ant.properties">ant.properties</a> file.
The target release.sf will create files in the directory
<code>build/bin/release/dist</code> for my own private use;
and it will copy these files to <code>build/bin/release/sf</code>
that can be posted on SourceForge. All these files have the
release number found in the properties file in the filename.

<div class="title">Summary</div>
Usually, when I make a new release, I throw away my <code>build</code> directory.
Then I execute:
<div class="commandline">ant release</div>
This creates all the jar, zip and tar.gz files I need to upload
to my site and to SourceForge. But before I do this, I also run:
<div class="commandline">ant tutorial.tar.gz</div>
This creates the tutorial pages, and compiles and executes all the examples.
Usually I have a look at the sample documents generated by the tutorial
examples to see if no functionality was broken in the new release.
	</div>
	</site:content>
</site:page>