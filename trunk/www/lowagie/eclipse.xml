<?xml version="1.0" encoding="UTF-8" ?> 
<!-- $Header: /cvsroot/itext/www/lowagie/cvs.xml,v 1.2 2006/05/22 11:00:29 blowagie Exp $ -->
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title>Install development environment</site:title>
		<site:summary>How I install my development environment for iText.</site:summary>
		<site:keywords>PDF, JAVA, iText, download, source, development environment</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
	</site:metadata>
	<site:content>
	<div>
<div class="header">How I install my development environment for iText (Eclipse)</div>
On the <a href="svn.html">previous page</a>, I explained which products
and tools I usually install when I buy myself a new PC, and how I get the
most recent iText version from Subversion (<a href="svn.html">SVN</a>).
On this page, I'll explain how I create an Eclipse Workspace, and projects
called 'main' and 'test'.
<div class="title">Creating a Workspace in Eclipse</div>
Upon opening Eclipse, you have to choose a workspace.
Let's fill in the path you have just created for the itext-core
<code>c:/itext-core</code> (see <a href="svn.html#checkout">SVN</a>):
<div class="figure"><img src="images/workspace.png" /></div>
<br />
Eclipse didn't know about this workspace yet, so it will show you
a welcome page:
<div class="figure"><img src="images/welcome.png" /></div>
<br />
You've probably seen this welcome page many times before,
so you can close it, and this is what you'll see:
<div class="figure"><img src="images/empty.png" /></div>
<br />
The work-space is empty for now, but let's add a new project:
<div class="figure"><img src="images/new_project.png" /></div>
<br />
More specifically, let's add a new Java project:
<div class="figure"><img src="images/java_project.png" /></div>
<br />
First we have to give the project a name. Let's call it main, so that the
path to the project will be <code>c:/itext-core/main/</code>.
<div class="figure"><img src="images/create_project.png" /></div>
<br />
Don't ask Eclipse to build the project from existing code and don't worry if you can't change
the JRE to 1.4 (in my case 1.6 is installed but I don't want to use it for iText),
just click next and see what happens. Note that you may have to wait for a while,
before you see the next screen:
<div class="figure"><img src="images/sourcepath.png" /></div>
<br />
Eclipse has done a great job trying to set the source path, the jars,... and
other properties (that's why it took some time). There's very little work left for us; note that I've only
changed the default output folder to <code>main/build/bin</code><br />
If you don't change this, the code will be compiled to class files in the directory
<code>main/bin</code>. This isn't really a problem. If you prefer it that way,
you can leave the path as-is. Personally, I prefer my class files under the build directory.
My ANT files will add plenty of other directories to the build directory; it will
use these directories to write temporary files that have to be jarred of zipped.
The tutorial, including all the PDFs that are generated from the tutorial examples,
will also be written to one of <code>build</code>'s subdirectories.<br />
As a rule, I never add files or directories manually to the <code>build</code> directory
(or its subdirectories). That way, I can safely throw away the <code>build</code> directory
without losing any important code or files. This allows me to start (almost) from scratch
if something went wrong. Everything in my <code>build</code> directory can be generated
either automagically by Eclipse or using an <a href="ant.html">ANT</a> script.<br />
Now is the time to start worrying about using the right JRE. Switch to the tab <code>Libraries</code>;
and you'll see that Eclipse has added all the jars it found in the <code>lib</code> directory
(which is nice).<br />
<div class="figure"><img src="images/classpath_wrong.png" /></div>
<br />
As you can see, the Java 6 runtime environment is used. We don't want that (see <a href="svn.html#requirements">requirements</a>).
You can create an iText.jar using Java 6 if that's what you want, but if you have users that aren't
ready to make the switch the Java6 yet (many developers out there are still using the JDK 1.4), you will
get a lot of complaints. Trust me: one gets really tired hearing the question 'can you compile me a jar
for the JDK 1.3 please?' over and over again. People don't always appreciate getting the answer:
DO IT YOURSELF!<br />
Select JRE System Library [jre_1.6.0_01] or whichever jre
other than 1.4 is mentioned and use the <code>Remove</code> button to delete the reference to Java 6.
Once this is done, try adding the JRE 1.4. We choose Add Library and select JRE System Library:
<div class="figure"><img src="images/add_jre.png" /></div>
<br />
The default JRE System library in my current Eclipse installation, is jre1.6.0_01:
<div class="figure"><img src="images/wrong_jre.png" /></div>
<br />
Clicking on Installed JREs, you see it's even the only JRE on my system according to Eclipse.
<div class="figure"><img src="images/installed_jre.png" /></div>
<br />
That's not entirely correct: I have a 1.4.2 JRE in my program files directory.
Let's add it:
<div class="figure"><img src="images/add_14_jre.png" /></div>
<br />
The only thing that remains to do, is to check the correct JRE:
<div class="figure"><img src="images/use_14_jre.png" /></div>
<br />
And select it as alternative JRE:
<div class="figure"><img src="images/system_library.png" /></div>
<br />
This looks more like it:
<div class="figure"><img src="images/classpath.png" /></div>
<br />
If all goes well --that is: if the version in SVN isn't broken--, everything compiles.
Note that there will always be some warnings, but most of them can safely be ignored).
<div class="figure"><img src="images/eclipse_ok.png" /></div>
<br />
The next step, is something personal, feel free to follow this advise or not.
I usually create a second project in the <code>itext-core</code> workspace:
<code>c:/itext-core/test/</code><br />
I use this project to create small standalone test programs, for instance
to test if some bug reported on the mailing list is indeed a bug, or just
some example of bad use of iText.
<div class="figure"><img src="images/test.png" /></div>
<br />
Check the properties of this project, and check if the JRE 1.4 is used.
Do the same for the jars: iText only needs the <a href="http://www.bouncycastle.org/">BouncyCastle</a> jars;
but the examples also need <a href="http://www.jfree.org/jfreereport/">JFreeReport</a>,
iTextAsian, and so forth. I usually don't care much about
the location of the class files, but you should make sure the <code>main</code> project
is defined as a <i>required project on the build path</i>.
<div class="figure"><img src="images/test_projects.png" /></div>
<br />
If you look at the directory <code>c:/itext-core</code> now, you can see that
Eclipse created a directory called <code>.metadata</code>; don't change it;
Eclipse needs it to store metadata about the workspace.<br />
You still have the <code>main</code> directory, you shouldn't touch its contents if you're not working <i>on</i>
iText. But as you created a new project called test, a new directory <code>test</code> was created
next to the <code>main</code> directory. This is the directory where you can put all your
experimental code when you're working <i>with</i> iText (note the important difference).<br />
<div class="figure"><img src="images/test_directory.png" /></div>
<br />
You can organize the contents of the <code>test</code> directory any way you wish, but
the <code>main</code> directory is organized like this:
<div class="figure"><img src="images/directories_before.png" /></div>
<br />
The bin directory was added by Eclipse when compiling the source code the first time.
However, when we told iText we wanted the <code>bin</code> directory to move to the
<code>build/bin</code> directory, <code>bin</code> was emptied and we can safely delete it.<br />
The <code>.classpath</code> and <code>.project</code> file are Eclipse specific files,
don't change them or you risk corrupting your Eclipse project <code>main</code>
in your <code>itext-core</code> workspace.<br />
I have write access to SVN, so I will be committing code to SVN on a regular basis.
As I already explained, <a href="svn.html">other iText developers use other IDEs</a>,
so it's important that I don't upload files that are specific for my environment to SVN.
That's why I usually tell SVN to ignore the <code>build</code> directory, and the
two project files:
<div class="figure"><img src="images/ignore.png" /></div>
<br />
There's one final setting I often forget, but that is useful to avoid confusion
when you're exploring your directories, more specifically the <code>build/bin</code> directory.
Eclipse copies all the files that can't be compiled to <code>build/bin</code>; including
all the <code>.svn</code> directories and SVN related files. This can give you the impression
that the stuff generated in the <code>build/bin</code> directory is (or should be) in SVN too.
You want to avoid this, and you can, by changing the <code>Output folder</code> property of
your projects:
<div class="figure"><img src="images/exclude_svn.png" /></div>
<br />
Add *.svn to your <i>filtered resources</i> (*.launch is added by Eclipse by default).<br />
Now I am ready to build the jar and make a release. That's done with <a href="ant.html">ANT</a>.
You'll find more info on the build.xml file on <a href="ant.html">the next page</a>.
	</div>
	</site:content>
</site:page>