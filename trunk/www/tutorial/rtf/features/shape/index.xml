<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Drawing object</site:title>
		<site:summary>Support for RTF Drawing Objects (Shapes).</site:summary>
		<site:keywords>JAVA, iText, RTF, examples</site:keywords>
		<site:amazonbooks>
			<site:book asin="0596004753">RTF Pocket Guide</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>RTF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Mark Hall</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="DrawingObjects" standalone="yes" />
			<site:result>DrawingObjects.rtf</site:result>
			<site:extrajar>itext-rtf.jar</site:extrajar>
			<site:description>Generates a document with one simple shape</site:description>
		</site:example>
		<site:example>
			<site:java src="DrawingAnchor" standalone="yes" />
			<site:result>DrawingAnchor.rtf</site:result>
			<site:extrajar>itext-rtf.jar</site:extrajar>
			<site:description>Generates a document demonstrating the use of different anchors for a drawing</site:description>
		</site:example>
		<site:example>
			<site:java src="DrawingWrap" standalone="yes" />
			<site:result>DrawingWrap.rtf</site:result>
			<site:extrajar>itext-rtf.jar</site:extrajar>
			<site:description>Generates a document demonstrating the different text wrapping modes</site:description>
		</site:example>
		<site:example>
			<site:java src="DrawingText" standalone="yes" />
			<site:result>DrawingText.rtf</site:result>
			<site:extrajar>itext-rtf.jar</site:extrajar>
			<site:description>Generates a document with text contained in the drawing object</site:description>
		</site:example>
		<site:example>
			<site:java src="DrawingFreeform" standalone="yes" />
			<site:result>DrawingFreeform.rtf</site:result>
			<site:extrajar>itext-rtf.jar</site:extrajar>
			<site:description>Generates a document demonstrating the creation of a freeform shape</site:description>
		</site:example>
	</site:examples>

	<site:chapter>
    <site:section name="drawingobjects">
    	<site:sectiontitle>Drawing Objects</site:sectiontitle>
    	<div>
    	  Drawing objects make it possible to add arbitrary shapes to the RTF document.
    	  Shapes in RTF are represented as a few basic settings and then an arbitrary list
    	  of properties that represent all other aspects of the shape. Only for the most
    	  core properties are constants defined. For all further properties, please refer to
    	  the <a href="http://msdn2.microsoft.com/en-us/library/aa140277(office.10).aspx">RTF Specification 1.6</a>.<br /><br />
    	  
    	  The basic class for creating drawing objects is the <site:doc class="com.lowagie.text.rtf.graphic.RtfShape">RtfShape</site:doc>.
    	  It is made up out of an <site:doc class="com.lowagie.text.rtf.graphic.RtfShapePosition">RtfShapePosition</site:doc>,
    	  that defines the position of the the drawing object on the page and a list of <site:doc class="com.lowagie.text.rtf.graphic.RtfShapeProperty">RtfShapeProperty</site:doc>s,
    	  that specify all other properties that define the drawing object.<br /><br />
    	  
    	  The constructor for the <site:doc class="com.lowagie.text.rtf.graphic.RtfShape">RtfShape</site:doc>
    	  takes the type of shape and an <site:doc class="com.lowagie.text.rtf.graphic.RtfShapePosition">RtfShapePosition</site:doc>.
    	  The <site:doc class="com.lowagie.text.rtf.graphic.RtfShapePosition">RtfShapePosition</site:doc> defines the
    	  extent of the drawing object (Important: These extents are in in <b>Twips</b>) and also properties such as
    	  the z-order of the drawing object and whether the shape is above or below the main text.<br />
    	  To this the <site:doc class="com.lowagie.text.rtf.graphic.RtfShapeProperty">RtfShapeProperty</site:doc> objects
    	  are added to define drawing object properties such as the line colour or fill colour.
    	  
    	  <pre class="commandline">
// Create a new RtfShape of the type RECTANGLE.
// The position defines the extent of the shape in the page (in Twips)
RtfShape shape = new RtfShape(RtfShape.SHAPE_RECTANGLE,
        new RtfShapePosition(1000, 2000, 3000, 2000));

// Set the line colour to red
shape.setProperty(new RtfShapeProperty(RtfShapeProperty.PROPERTY_LINE_COLOR,
        Color.RED));

// Set the fill colour to cyan
shape.setProperty(new RtfShapeProperty(RtfShapeProperty.PROPERTY_FILL_COLOR,
        Color.CYAN));

// Add the shape to the document
document.add(shape);
    	  </pre>

    	  <site:source class="DrawingObjects" />
    	</div>
    </site:section>

    <site:section name="drawinganchor">
    	<site:sectiontitle>Anchoring the Drawing Object</site:sectiontitle>
    	<div>
    	  By default the drawing object is anchored to the page, so that the values in
    	  the <site:doc class="com.lowagie.text.rtf.graphic.RtfShapePosition">RtfShapePosition</site:doc>
    	  are applied relative to the top, left corner of the page. Other anchorings that are possible are:
    	  
    	  <ul>
    	    <li>Horizontal anchoring
    	      <ul>
    	        <li><b>RtfShapePosition.POSITION_X_RELATIVE_PAGE:</b> The default, anchored to the page.</li>
    	        <li><b>RtfShapePosition.POSTIION_X_RELATIVE_MARGIN:</b> The horizontal position is relative to the margin of the page.</li>
    	        <li><b>RtfShapePosition.POSITION_X_RELATIVE_COLUMN:</b> The horizontal position is relative to the current column the shape is in.</li>
    	      </ul>
    	    </li>
    	    <li>Vertical anchoring
    	      <ul>
    	        <li><b>RtfShapePosition.POSITION_Y_RELATIVE_PAGE:</b> The default, anchored to the page.</li>
    	        <li><b>RtfShapePosition.POSTIION_Y_RELATIVE_MARGIN:</b> The horizontal position is relative to the margin of the page.</li>
    	        <li><b>RtfShapePosition.POSITION_Y_RELATIVE_PARAGRAPH:</b> The horizontal position is relative to the paragraph the shape is in. If the paragraph
    	          moves, the drawing object is moved with it.</li>
    	      </ul>
    	    </li>
    	  </ul><br />
    	  
    	  As an example the POSITION_Y_RELATIVE_PARAGRAPH anchoring can be used to create a horizontal line, separating two pieces of text.
    	  
    	  <pre class="commandline">
// Construct a new RtfShapePosition that covers the whole page horizontally 
RtfShapePosition position = new RtfShapePosition(150, 0, 10400, 150);

// The horizontal position is relative to the margins of the page
position.setXRelativePos(RtfShapePosition.POSITION_X_RELATIVE_MARGIN);

// The vertical position is relative to the paragraph
position.setYRelativePos(RtfShapePosition.POSITION_Y_RELATIVE_PARAGRAPH);
            
// Create a new line drawing object
RtfShape shape = new RtfShape(RtfShape.SHAPE_LINE, position);
            
// Add the shape to the paragraph, so that it is anchored to the
// correct paragraph
Paragraph par = new Paragraph();
par.add(shape);
document.add(par);
    	  </pre>

    	  <site:source class="DrawingAnchor" />
    	</div>
    </site:section>

    <site:section name="drawingwrap">
    	<site:sectiontitle>Text Wrapping and Z-Order</site:sectiontitle>
    	<div>
    	  By default <site:doc class="com.lowagie.text.rtf.graphic.RtfShape">RtfShape</site:doc>s are
    	  positioned above the text and the text does not wrap around them, but flow under them. Using
    	  the <span class="commandline">RtfShape.setWrapping</span>, <span class="commandline">RtfShapePosition.setBelowText</span>
    	  and <span class="commandline">RtfShapePosition.setZOrder</span> methods you can change these
    	  defaults.<br /><br />
    	  
    	  Wrapping defines how the text flows around the drawing object. The following wrapping modes are supported:
    	  <ul>
    	    <li><b>SHAPE_WRAP_NONE</b>: The default. Text flows under or over the drawing object.</li>
    	    <li><b>SHAPE_WRAP_BOTH</b>: Text is wrapped around both sides of the drawing object, if there is space.</li>
    	    <li><b>SHAPE_WRAP_LEFT</b>: Text is wrapped around the left side of the drawing object, if there is space.</li>
    	    <li><b>SHAPE_WRAP_RIGHT</b>: Text is wrapped around the right side of the drawing object, if there is space.</li>
    	    <li><b>SHAPE_WRAP_LARGEST</b>: Text is wrapped around the largest free side of the drawing object.</li>
    	    <li><b>SHAPE_WRAP_THROUGH</b>: Text is wrapped through the drawing object.</li>
    	    <li><b>SHAPE_WRAP_TOP_BOTTOM</b>: No text will be placed to the left or right of the drawing object.</li>
    	    <li><b>SHAPE_WRAP_TIGHT_BOTH</b>: As SHAPE_WRAP_BOTH, but with less space between the text and the drawing object.</li>
    	    <li><b>SHAPE_WRAP_TIGHT_LEFT</b>: As SHAPE_WRAP_LEFT, but with less space between the text and the drawing object.</li>
    	    <li><b>SHAPE_WRAP_TIGHT_RIGHT</b>: As SHAPE_WRAP_RIGHT, but with less space between the text and the drawing object.</li>
    	    <li><b>SHAPE_WRAP_TIGHT_LARGETS</b>: As SHAPE_WRAP_LARGEST, but with less space between the text and the drawing object.</li>
    	  </ul><br />
    	  
    	  <pre class="commandline">
// Create an elliptical RtfShape, around which text will only wrap on the left side
position = new RtfShapePosition(3000, 6000, 10500, 4500);
shape = new RtfShape(RtfShape.SHAPE_ELLIPSE, position);
shape.setWrapping(RtfShape.SHAPE_WRAP_LEFT);
    	  </pre>
    	  
    	  Using the <span class="commandline">RtfShapePosition.setBelowText</span> method, you can define whether
    	  the text is above or below the drawing object, if no wrapping is set. If text wrapping is set,
    	  then this has no effect.
    	  
    	  <pre class="commandline">
// Create a rounded rectangle RtfShape and position it below the text
position = new RtfShapePosition(4000, 1500, 4500, 5000);
position.setShapeBelowText(true);
shape = new RtfShape(RtfShape.SHAPE_ROUND_RECTANGLE, position);
    	  </pre>
    	  
    	  Finally the <span class="commandline">RtfShapePosition.setZOrder</span> defines the z-order of
    	  the drawing objects, allowing you to stack shapes. The higher the z-order the further on top the
    	  stack the drawing object will be placed.
    	  
    	  <pre class="commandline">
// Create a circular RtfShape and set its z-order to 1
position = new RtfShapePosition(5850, 6800, 8200, 7250);
position.setZOrder(1);
shape = new RtfShape(RtfShape.SHAPE_ELLIPSE, position);
document.add(shape);

// Create a star RtfShape and set its z-order to 2, above the circle
// defined above
position = new RtfShapePosition(6000, 7000, 8000, 7000);
position.setZOrder(2);
    	  </pre>
    	  
    	  <site:source class="DrawingWrap" />
    	</div>
    </site:section>

    <site:section name="drawingtext">
    	<site:sectiontitle>Text in Drawing Objects</site:sectiontitle>
    	<div>
    	  You can place text within the drawing objects using the <span class="commandline">RtfShape.setShapeText</span>
    	  method. This only allows placement of very simple text and does not support any formatting.
    	  
    	  <pre class="commandline">
// Set the text to display in the drawing object
shape.setShapeText("This text will appear in the drawing object.");
    	  </pre>

    	  <site:source class="DrawingText" />
    	</div>
    </site:section>

    <site:section name="drawingfreeform">
    	<site:sectiontitle>Freeform Objects</site:sectiontitle>
    	<div>
    	  The <site:doc class="com.lowagie.text.rtf.graphic.RtfShape">RtfShape</site:doc> provides a number
    	  of predefined shapes, but sometimes it is useful to be able to draw something more flexible.<br /><br />
    	  
    	  In this case the <site:doc class="com.lowagie.text.rtf.graphic.RtfShape">RtfShape</site:doc>
    	  is created with the shape type <span class="commandline">SHAPE_FREEFORM</span>. In the second step
    	  the internal coordinate system is defined and finally the points of the shape are specified.
    	  For the internal coordinate system it is only necessary to specify the right and bottom values, as
    	  top and left default to 0. In the example these values are set to the width and height of the drawing
    	  object in Twips, but any values may be used and they will automatically be scaled to the size of the
    	  drawing object. The vertices of the drawing object are defined as an array of <span class="commandline">Point</span>
    	  objects. It is important to remember that the coordinates of the points are defined within the
    	  internal coordinate system and not the external one defined in the <site:doc class="com.lowagie.text.rtf.graphic.RtfShapePosition">RtfShapePosition</site:doc>
    	  constructor.
    	  
    	  <pre class="commandline">
// Create a new rectangle RtfShape using the SHAPE_FREEFORM constant.
RtfShapePosition position = new RtfShapePosition(1000, 1000, 4000, 4000);
RtfShape shape = new RtfShape(RtfShape.SHAPE_FREEFORM, position);

// Set the bottom and right extents of the drawing object.
shape.setProperty(new RtfShapeProperty(RtfShapeProperty.PROPERTY_GEO_RIGHT, 3000));
shape.setProperty(new RtfShapeProperty(RtfShapeProperty.PROPERTY_GEO_BOTTOM, 3000));

// Define the vertices that make up the drawing object.
// This list draws a basic table shape.
shape.setProperty(new RtfShapeProperty(RtfShapeProperty.PROPERTY_VERTICIES,
    new Point[]{
        new Point(100, 100),
        new Point(2900, 100),
        new Point(2900, 200),
        new Point(2600, 200),
        new Point(2600, 1500),
        new Point(2520, 1500),
        new Point(2520, 200),
        new Point(480, 200),
        new Point(480, 1500),
        new Point(400, 1500),
        new Point(400, 200),
        new Point(100, 200)
    }));
    	  </pre>

    	  <site:source class="DrawingFreeform" />
    	</div>
    </site:section>

	</site:chapter>
</site:page>
