<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">RTF generation settings</site:title>
		<site:summary>How to configure settings for the RTF generation.</site:summary>
		<site:keywords>JAVA, iText, RTF, examples</site:keywords>
		<site:amazonbooks>
			<site:book asin="0596004753">RTF Pocket Guide</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>RTF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Mark Hall</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="DocumentSettings" standalone="yes" />
			<site:result>DocumentSettings.rtf</site:result>
			<site:description>Generates a simple document with modified document settings</site:description>
		</site:example>
	</site:examples>

	<site:chapter>
    <site:section name="settings">
    	<site:sectiontitle>RTF generation settings</site:sectiontitle>
    	<div>
    	  The RtfWriter2 supports a set of configuration switches that can be used to
    	  tailor the RTF generated.
    	  <dl>
    	    <dt style="font-weight: bold;">outputTableRowDefinitionAfter (Boolean)</dt>
    	    <dd>Whether to write the table row definitions both before and after
    	      the table data. Set to <span class="commandline">true</span> if you
    	      are generating RTF documents that need to be read with Word 2000.
    	      Set to <span class="commandline">false</span> if you are generating
    	      RTF documents that need to be read with OpenOffice.org Writer. By
    	      default table row definitions are written both before and after.</dd>
    	    <dt style="font-weight: bold;">alwaysGenerateSoftLinebreaks (Boolean)</dt>
    	    <dd>Whether \n characters should be written as hard or soft linebreaks.
    	      By default only \n characters in lists and table cells are written as
    	      soft linebreaks. Setting this property to <span class="commandline">true</span>
    	      causes all \n characters to be written as soft linebreaks.s</dd>
    	    <dt style="font-weight: bold;">alwaysUseUnicode (Boolean)</dt>
    	    <dd>Whether all characters bigger than 'z' should be written as unicode escapes
    	      or whether the original character should be written. The default is to escape
    	      everything, which leads to larger RTF files. Setting this property to 
    	      <span class="commandline">false</span> reduces RTF file size, but may lead
    	      to characters being displayed incorrectly.</dd>
    	    <dt style="font-weight: bold;">dataCacheStyle (Integer)</dt>
    	    <dd>Specifies where the RTF document is cached during document generation. Valid
    	      values are specified in the <site:doc class="com.lowagie.text.rtf.document.output.RtfDataCache">RtfDataCache</site:doc>.
    	      <ul>
    	        <li>CACHE_MEMORY: The default keeps the whole document in memory. This increases
    	          the generation speed, but places a maximum size on the document.</li>
    	        <li>Cache_DISK: The document is cached on disk. This decreases the document generation
    	          speed, but the maximum document size is increased to the amount of space free
    	          on the disk.</li>
    	      </ul>
    	      You can only set this property before calling <span class="commandline">document.open()</span>.
    	    </dd>
    	    <dt style="font-weight: bold;">outputDebugLineBreaks (Boolean)</dt>
    	    <dd>This setting is primarily for debugging purposes and leads to slightly larger,
    	      but more readable RTF files. Set it to <span class="commandline">false</span>
    	      to decrease the RTF file size.</dd>
    	  </dl>
    	  You access these generation settings by getting the <span class="commandline">RtfDocumentSettings</span>
    	  object from the <span class="commandline">RtfWriter2</span>.
    	  <pre class="commandline">
Document document = new Document();
RtfWriter2 writer2 = RtfWriter2.getInstance(document,
	new FileOutputStream("rtfDocumentSettings.rtf"));

// Access the RtfDocumentSettings and set the desired properties	
writer2.getRtfDocumentSettings().setDataCacheStyle(RtfDataCache.CACHE_DISK);

document.open();
...
document.close();
    	  </pre>
          <site:source class="DocumentSettings" />
    	</div>
    </site:section>
    </site:chapter>
</site:page>