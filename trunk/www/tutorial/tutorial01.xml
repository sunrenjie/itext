<itext title="Getting started" author="Bruno Lowagie" subject="5 steps to create a PDF document using iText" keywords="tutorial, document, writer, outputstream, content, PDF, JAVA, iText, Bruno, Lowagie">
	<newline />
	<newline />
	<paragraph font="Helvetica" size="11">$Id$</paragraph>
	<newline />
	<newline />
	<newline />
	<chapter numberdepth="0">
		<title font="Helvetica" size="18" leading="30">Chapter I: Getting Started</title>
		<newline />
		<section>
			<title size="14" color="#008080" leading="25">Creation of a document in 5 steps: Hello World</title>
			<text>
				It's a good tradition to start a tutorial with a very simple example.
				So that's why we start with a small standalone application that creates a PDF document
				containing one simple and universal message:
				<link reference="#Chap0101">Hello World</link>.<newline />
				<block>
					<row>
						<cell>
							<text> 
								<bold>Important:</bold> You can find the source code of all
								the examples at the end of each chapter. If an example is mentioned in the
								text, just click on the colored word (for instance: the words 'Hello World' in
								the above paragraph) to jump to the sample code.
							</text>
						</cell>
					</row>
				</block>
			</text>
			<newline />
			<text>
				These are the 5 steps to create a PDF document using iText:<newline /><newline />
				<link reference="#step1" style="bold">Step 1:</link><newline />
				Create an instance of the <class>com.lowagie.text.Document</class>-object:<newline />
				<code>Document document = new Document();</code><newline />
				<newline />
				<link reference="#step2" style="bold">Step 2:</link><newline />
				Create a Writer that listens to this document and writes the document to the OutputStream of your choice:<newline />
				<code>PdfWriter.getInstance(document, new FileOutputStream("Chap0101.pdf"));</code><newline />
				<newline />
				<link reference="#step3" style="bold">Step 3:</link><newline />
				Open the document:<newline />
				<code>document.open();</code><newline />
				<newline />
				<link reference="#step4" style="bold">Step 4:</link><newline />
				Add content to the document:<newline />
				<code>document.add(new Paragraph("Hello World"));</code><newline />
				<newline />
				<link reference="#step5" style="bold">Step 5:</link><newline />
				Close the document:<newline />
				<code>document.close();</code><newline />
			</text>
		</section>
		<newpage />
		<section>
			<title size="14" color="#008080" leading="25"><anchor name="step1" size="14" color="#008080" leading="25">Examining step 1: The Document Object</anchor></title>
			<text>
				The <class>com.lowagie.text.Document</class>-object has 3 constructors:<newline />
				<code>public Document();</code><newline />
				<code>public Document(Rectangle pageSize);</code><newline />
				<code>public Document(Rectangle pageSize, int marginLeft, int marginRight, int marginTop, int marginBottom);</code>
				<newline />
				The first constructor calls the second one, with
				<class>PageSize.A4</class> as parameter. The second constructor calls the third one, with
				<class>36</class> as value for each margin.
			</text>
			<newline />
			<section numberdepth="0">
				<title><anchor name="pagesize" font="Helvetica" size="11" style="bold">PageSize</anchor></title>
				<text>
					You could create your own <class>Rectangle</class>-object in a certain
					color and use this as pageSize.<newline />
					In <link reference="#Chap0102">Example 2</link>, we create a long, narrow
					document with a yellowish backgroundcolor:<newline />
					<code>Rectangle pageSize = new Rectangle(144, 720);</code><newline />
					<code>pageSize.setBackgroundColor(new java.awt.Color(0xFF, 0xFF, 0xDE));</code><newline />
					<code>Document document = new Document(pageSize);</code><newline />
					Normally, you don't have to worry about creating this rectangle, since you can use one of the statics in class
					<link reference="http://itext.sourceforge.net/src/com/lowagie/text/PageSize.java">PageSize.java</link>.
					These are the pagesizes that are provided: A0-A10, LEGAL, LETTER, HALFLETTER, _11x17, LEDGER, NOTE, B0-B5, ARCH_A-ARCH_E,
					FLSA and FLSE.<newline />
					Most of these pageSizes are in PORTRAIT-format. If you want them to be in <anchor name="landscape">LANDSCAPE</anchor>,
					all you have to do is <class>rotate()</class> the <class>Rectangle</class>:<newline />
					<code>Document document = new Document(PageSize.A4.rotate());</code><newline />
					This is demonstrated in <link reference="#Chap0103">Example 3</link>.
				</text>
			</section>
			<section numberdepth="0">
				<title><anchor name="margins" font="Helvetica" size="12" style="bold">Margins</anchor></title>
				<text>
					When creating a document, you can also define left, right, upper and lower margins:<newline />
					<code>Document document = new Document(PageSize.A5, 36, 72, 108, 180);</code><newline />
					In <link reference="#Chap0104">Example 4</link>, you will see that this document has a left margin
					of 0.5 inch and a right margin of 1 inch. The upper margin is 1.5 inch, the lower 2.5 inch.
				</text>
				<block>
					<row>
						<cell>
							<text> 
								<anchor name="measurements" style="bold">measurements</anchor><newline />
								When creating a rectangle or choosing a margin, you might wonder what measurement unit
								is used: centimeters, inches or pixels. In fact, the default measurement system
								roughly corresponds to the various definitions of the typographic unit of
								measurement known as the <chunk style="italic">point</chunk>. There are 72 points in 1 inch.
								If you want to create a rectangle in PDF that has the size of an A4-page,
								you have to calculate the number of points:
							</text>
							<list numbered="false" listsymbol="" symbolindent="20">
								<listitem font="Helvetica" size="11">
									21 cm / 2.54 = 8.2677 inch
								</listitem>
								<listitem font="Helvetica" size="11">
									8.2677 * 72 = 595 points
								</listitem>
								<listitem font="Helvetica" size="11">
									29.7 cm / 2.54 = 11.6929 inch
								</listitem>
								<listitem font="Helvetica" size="11">
									11.6929 * 72 = 842 points
								</listitem>
							</list>
							<text>
								The default border of 36 points corresponds with half an inch.
								The rectangle we created in Example 2 was 2 by 10 inches.
							</text>
						</cell>
					</row>
				</block>
			</section>
		</section>
		<section>
			<title size="14" color="#008080" leading="25"><anchor name="step2" size="14" color="#008080" leading="25">Examining step 2: the Writer-object</anchor></title>
			<text>
				Once our document is created, we can create one or more instances of writer that listen to this document.
				All writers should be derived from the abstract class <class>com.lowagie.text.DocWriter</class>.<newline />
				For the moment there are three possibilities: you can use <class>com.lowagie.text.pdf.PdfWriter</class> to
				generate documents in the Portable Document Format, you can use <class>com.lowagie.text.html.HtmlWriter</class> to
				generate documents in HTML (<tutlink reference="ch06.html">chapter 6</tutlink>), or you can use
				<class>com.lowagie.text.xml.XmlWriter</class> to produce XML (<tutlink reference="ch06.html">chapter 7</tutlink>).
				If for instance you want to generate TeX-documents as well, you could write	a package: <class>com.lowagie.text.TeX.TeXWriter</class>.<newline />
			</text>
			<text>
				The constructor of these writer-classes is made private. You can only create an instance with the following method:<newline />
				<code>public static xxxWriter getInstance(Document document, OutputStream os)</code><newline />
				    <code>throws DocumentException</code><newline />
				(<class>xxx</class> being Pdf, Html or Xml)<newline />
				You can create an instance this way:<newline />
				<code>PdfWriter writer = PdfWriter.getInstance(document,</code><newline />
				    <code>new FileOutputStream("Chap01xx.pdf"));</code><newline />
				but you will hardly ever need the object <class>writer</class> (except if you want to create <tutlink reference="ch10.html">Advanced PDF</tutlink>).<newline />
				So it's sufficient to just get the instance:<newline />
				<code>PdfWriter.getInstance(document, new FileOutputStream("Chap01xx.pdf"));</code>
			</text>
			<text>
				It's trivial that the first parameter should be the document you created in <link reference="#step1">step 1</link>.<newline />
				The second parameter can be an outputStream of any kind.<newline />
				Until now, we have always shown examples the use a <class>java.io.FileOutputStream</class> to write the document to a file,
				but in <link reference="#Chap0105">Example 5</link>, the outputStream is a <class>javax.servlet.ServletOutputStream</class>.
				You will have to test this code on a Servlet Engine.<newline />
				The first URL should return a PDF file with the current date and time.
				If you use MSIE as browser, you will only see a blank page due to a bug (see the <link reference="http://www.lowagie.com/iText/faq.html#msie">FAQ</link>).
				The second URL shows you the current time as an HTML-file.<newline /><newline />
				If you want to try a more difficult example (using the workaround in the FAQ), try the
				following code: <link reference="http://www.lowagie.com/iText/examples/Calendar.java">Calendar.java</link> and
				<link reference="http://www.lowagie.com/iText/examples/Month.java">Month.java</link>.			
			</text>
		</section>
		<section>
			<title size="14" color="#008080" leading="25"><anchor name="step3" size="14" color="#008080" leading="25">Examining step 3: Meta data + opening the document</anchor></title>
			<text>
				Before you add any actual data (= content), you might want to add some metadata about the document with one of these methods:<newline />
				<code>public boolean addTitle(String title)</code><newline />
				<code>public boolean addSubject(String subject)</code><newline />
				<code>public boolean addKeywords(String keywords)</code><newline />
				<code>public boolean addAuthor(String author)</code><newline />
				<code>public boolean addProducer()</code><newline />
				<code>public boolean addCreationDate()</code><newline />
				<code>public boolean addHeader(String name, String content)</code><newline />
				<newline />
				You can choose your own title, subject, keywords and author, but the method that
				adds the producerdata should always add:<newline />
				<code>iText by lowagie.com</code><newline />
				and the method that adds the creation date always add the current system time
				(as a matter of fact, these two methods are called automatically).<newline />
				You can also add a header with a custom name, but this will have no effect on the
				PdfWriter (for the moment it is only used in the HtmlWriter).<newline />
				If we look at the example in step 1: <link reference="http://itext.sourceforge.net/examples/Chap0101.pdf">Chap0101.pdf</link>,
				we see that only the producer and date are shown in the infobox. If we run
				<link reference="#Chap0106">Chap0106.java</link>, the result is a similar document:
				<link reference="http://itext.sourceforge.net/examples/Chap0106.pdf">Chap0106.pdf</link>,
				but there are more items added to the infobox:<newline />
				<image url="http://www.lowagie.com/iText/tutorial/Chap0106.png" align="Middle" />
				You can only add metadata this BEFORE the <class>open</class>-method
				is invoked. This is a choice made by the developer of iText.<newline />In HTML meta-information is
				put between the <class>HEAD</class>-tags at the beginning of the document
				(the header section). Invoking the <class>open</class>-method causes the writer
				to write this header to the <class>OutputStream</class>.
				So there is no way to change this data once the document is 'opened'.<newline />
				The PDF header doesn't contain any metadata, it looks like this:<newline />
				<code>%PDF-1.2</code><newline />
				<code>&#224;&#225;&#226;&#227;</code><newline />
				The first line indicates the generated document is a file in the Portable Document Format version 1.2.
				The meaning of the second line is explained in the reference manual.<newline />
				<block><row><cell>
				<text>
					<bold>Portable Document Format Reference Manual Version 1. 3 (section 2.3.2 'Portability' page 22):</bold><newline />
					A PDF file is a binary file; the entire 8-bit range of characters may be used.
					Unfortunately, some agents treat files that happen to use only the printable subset
					of the 7-bit ASCII code and whitespace characters as <italic>text</italic>, and take unreasonable
					liberties with the contents. For example, mail-transmission systems may not
					preserve certain 7-bit characters and may change line endings. This can cause
					damage to PDF files.<newline />
					Therefore, in situations where it is possible to label PDF files as <italic>binary</italic>, we
					recommend that this be done. One method for encouraging such treatment is to
					include a few binary characters (codes greater than 127) in a comment near the
					beginning of the file.
				</text>
				</cell></row></block>
				In PDF, the metadata is kept in a <class>PdfInfo</class>-object,
				written to the PdfWriter when the document is closed. So there is no reason why one
				couldn't alter the library to be able to add or change the metadata at any time.<newline />
				<anchor name="firstpage">The <class>open</class>-method</anchor> also triggers some initialisations
				in the different writers. For instance if you want a <class>Watermark</class>
				or a <class>HeaderFooter</class>-object to appear starting on the FIRST page
				of the document, you have to add it BEFORE you open the document.
				The same goes for setting watermark, headers, footers, pagenumbers and sizes for the rest
				of the pages in the document.<newline />
				When you invoke methods such as:<newline />
				<code>public boolean setPageSize(Rectangle pageSize)</code><newline />
				<code>public boolean add(Watermark watermark)</code><newline />
				<code>public void removeWatermark()</code><newline />
				<code>public void setHeader(HeaderFooter header)</code><newline />
				<code>public void resetHeader()</code><newline />
				<code>public void setFooter(HeaderFooter footer)</code><newline />
				<code>public void resetFooter()</code><newline />
				<code>public void resetPageCount()</code><newline />
				<code>public void setPageCount(int pageN)</code><newline />
				<code>public void setViewerpreferences(int preferences)</code><newline />
				the result of most of these methods will only be seen on the next new page (when the
				initialisation methods of this page are called). This is illustrated in
				<link reference="#Chap0107">Example 7</link>. <link reference="#Chap0108">Example 8</link>
				shows how you can set the viewerpreferences of your reader.
			</text>
		</section>
		<section>
			<title size="14" color="#008080" leading="25"><anchor name="step4" size="14" color="#008080" leading="25">Examining step 4: adding content</anchor></title>
			<text>
				In the different examples explaining step 1 to 3, you have already encountered objects such as
				Phrase, Paragraph,... In the next chapter all these objects will be explained more thoroughly.<newline />
				It is very important to realize that not all types of objects are supported in all types
				of writers. For instance: the <class>Graphic</class>-object isn't supported
				in HTML. If you add a graphic to a <class>Document</class>, the listening
				<class>HtmlWriter</class> will ignore this.	Sometimes you may want a writer
				to deliberately ignore actions performed on a document. This is shown in
				<link reference="#Chap0109">Example 9</link>.<newline />
				If we create two writers: writerA and writerB (this is an exception to what was said in
				<link reference="#step2">step 2</link>):<newline />
				<code>PdfWriter writerA = PdfWriter.getInstance(document,</code><newline />
				<code>new FileOutputStream("Chap0109a.pdf"));</code><newline />
				<code>PdfWriter writerB = PdfWriter.getInstance(document,</code><newline />
				<code>new FileOutputStream("Chap0109b.pdf"));</code><newline />
				We can create two documents that are slightly different:<newline />
				<code>writerA.pause();</code><newline />
				<code>document.add(new Paragraph("This paragraph will only be added to Chap0109b.pdf, not to Chap0109a.pdf"));</code><newline />
				<code>writerA.resume();</code><newline />
				You can compare the results of example 9 here: <link reference="http://itext.sourceforge.net/examples/Chap0109a.pdf">Chap0109a.pdf</link> vs.
				<link reference="http://www.lowagie.com/iText/examples/Chap0109b.pdf">Chap0109b.pdf</link>.
			</text>
		</section>
		<section>
			<title size="14" color="#008080" leading="25"><anchor name="step5" size="14" color="#008080" leading="25">Examining step 5: closing the document</anchor></title>
			<text>
				Closing the document is very important, because it flushes and closes the outputstream to which the writer is writing.
				The close-method is called in the finalize-method, but you shouldn't count on that.
				You should always close the document yourself! 
			</text>
		</section>
		<newpage />
		<section>
			<title size="14" color="#008080">Source code of the examples</title>
			<section numberdepth="2">
				<title><anchor name="Chap0101">Example 1: Hello World</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0101.java" color="#008080">source code</anchor> and
					the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0101.pdf" color="#008080">resulting PDF</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					<newline />
					public class Chap0101 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 1: Hello World");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document();<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter.getInstance(document, new FileOutputStream("Chap0101.pdf"));<newline />
					            <newline />
					            // step 3: we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // step 4: we add a paragraph to the document<newline />
					            document.add(new Paragraph("Hello World"));<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0102">Example 2: PageSize</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0102.java" color="#008080">source code</anchor> and
					the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0102.pdf" color="#008080">resulting PDF</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					<newline />
					public class Chap0102 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 2: PageSize");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Rectangle pageSize = new Rectangle(144, 720);<newline />
					        pageSize.setBackgroundColor(new java.awt.Color(0xFF, 0xFF, 0xDE));<newline />
					        Document document = new Document(pageSize);<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter.getInstance(document, new FileOutputStream("Chap0102.pdf"));<newline />
					            <newline />
					            // step 3: we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // step 4: we add some paragraphs to the document<newline />
					            for (int i = 0; i &lt; 5; i++) {<newline />
					                document.add(new Paragraph("Hello World"));<newline />
					            }<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0103">Example 3: PageSize</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0103.java" color="#008080">source code</anchor> and
					the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0103.pdf" color="#008080">resulting PDF</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					<newline />
					public class Chap0103 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 3: PageSize");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document(PageSize.A4.rotate());<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter.getInstance(document, new FileOutputStream("Chap0103.pdf"));<newline />
					            <newline />
					            // step 3: we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // step 4: we add some phrases to the document<newline />
					            for (int i = 0; i &lt; 20; i++) {<newline />
					                document.add(new Phrase("Hello World, Hello Sun, Hello Moon, Hello Stars, Hello Sea, Hello Land, Hello People. "));<newline />
					            }<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0104">Example 4: Margins</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0104.java" color="#008080">source code</anchor> and
					the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0104.pdf" color="#008080">resulting PDF</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					<newline />
					public class Chap0104 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 4: Margins");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document(PageSize.A5, 36, 72, 108, 180);<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter.getInstance(document, new FileOutputStream("Chap0104.pdf"));<newline />
					            <newline />
					            // step 3: we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // step 4: we add a paragraph to the document<newline />
					            Paragraph paragraph = new Paragraph();<newline />
					            paragraph.setAlignment(Element.ALIGN_JUSTIFIED);<newline />
					            for (int i = 0; i &lt; 20; i++) {<newline />
					                paragraph.add("Hello World, Hello Sun, Hello Moon, Hello Stars, Hello Sea, Hello Land, Hello People. ");<newline />
					            }<newline />
					            document.add(paragraph);<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0105">Example 5: Servlet example</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0105.java" color="#008080">source code</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.PrintWriter;<newline />
					import java.io.IOException;<newline />
					import java.io.File;<newline />
					<newline />
					import java.util.Date;<newline />
					<newline />
					import javax.servlet.http.*;<newline />
					import javax.servlet.*;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					import com.lowagie.text.html.HtmlWriter;<newline />
					<newline />
					public class Chap0105 extends HttpServlet {<newline />
					    <newline />
					    public void doGet (HttpServletRequest request, HttpServletResponse response)<newline />
					    throws IOException, ServletException {<newline />
					        <newline />
					        // we retrieve the presentationtype<newline />
					        String presentationtype = request.getParameter("presentationtype");<newline />
					        <newline />
					        // step 1<newline />
					        Document document = new Document();<newline />
					        try {<newline />
					            // step 2: we set the ContentType and create an instance<newline />
					            // of the corresponding Writer<newline />
					            if ("pdf".equals(presentationtype)) {<newline />
					                response.setContentType("application/pdf");<newline />
					                PdfWriter.getInstance(document, response.getOutputStream());<newline />
					            }<newline />
					            else if ("html".equals(presentationtype)) {<newline />
					                response.setContentType("text/html");<newline />
					                HtmlWriter.getInstance(document, response.getOutputStream());<newline />
					            }<newline />
					            else {<newline />
					                response.sendRedirect(<newline />
					                    "http://www.lowagie.com/iText/tutorial/ch01.html#step2");<newline />
					            }<newline />
					            <newline />
					            // step 3<newline />
					            document.open();<newline />
					            <newline />
					            // step 4<newline />
					            document.add(new Paragraph(new Date().toString()));<newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            de.printStackTrace();<newline />
					            System.err.println("document: " + de.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document (the outputstream is also closed internally)<newline />
					        document.close();<newline />
					    }
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0106">Example 6: Meta Information</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0106.java" color="#008080">source code</anchor> and
					the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0106.pdf" color="#008080">resulting PDF</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					<newline />
					import com.lowagie.text.html.HtmlWriter;<newline />
					<newline />
					public class Chap0106 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 6: Meta Information");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document();<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter.getInstance(document, new FileOutputStream("Chap0106.pdf"));<newline />
					            HtmlWriter.getInstance(document, System.out);<newline />
					            <newline />
					            // step 3: we add some metadata and open the document<newline />
					            <newline />
					            document.addTitle("Hello World example");<newline />
					            document.addSubject("This example explains step 3 in Chapter 1");<newline />
					            document.addKeywords("Metadata, iText, step 3, tutorial");<newline />
					            document.addAuthor("Bruno Lowagie");<newline />
					            document.addHeader("Expires", "0");<newline />
					            document.open();<newline />
					            <newline />
					            // step 4: we add a paragraph to the document<newline />
					            document.add(new Paragraph("Hello World"));<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0107">Example 7: newPage()</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0107.java" color="#008080">source code</anchor> and
					the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0107.pdf" color="#008080">resulting PDF</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					<newline />
					import com.lowagie.text.html.HtmlWriter;<newline />
					<newline />
					public class Chap0107 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 7: newPage()");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document();<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter.getInstance(document, new FileOutputStream("Chap0107.pdf"));<newline />
					            <newline />
					            // step 3:<newline />
					            <newline />
					            // we add a Watermark that will show up on PAGE 1<newline />
					            try {<newline />
					                Watermark watermark =<newline />
					                    new Watermark(Image.getInstance("watermark.jpg"), 200, 420);<newline />
					                document.add(watermark);<newline />
					            }<newline />
					            catch(Exception e) {<newline />
					                System.err.println("Are you sure you have the file 'watermark.jpg' in the right path?");<newline />
					            }<newline />
					            <newline />
					            // we add a Header that will show up on PAGE 1<newline />
					            HeaderFooter header = new HeaderFooter(new Phrase("This is a header"),<newline />
					                false);<newline />
					            document.setHeader(header);<newline />
					            <newline />
					            // we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // we rotate the page, starting from PAGE 2<newline />
					            document.setPageSize(PageSize.A4.rotate());<newline />
					            <newline />
					            // we need to change the position of the Watermark<newline />
					            try {<newline />
					                Watermark watermark =<newline />
					                    new Watermark(Image.getInstance("watermark.jpg"), 320, 200);<newline />
					                document.add(watermark);<newline />
					            }<newline />
					            catch(Exception e) {<newline />
					                System.err.println("Are you sure you have the file 'watermark.jpg' in the right path?");<newline />
					            }<newline />
					            <newline />
					            // we add a Footer that will show up on PAGE 2<newline />
					            HeaderFooter footer = new HeaderFooter(new Phrase("This is page: "),<newline />
					                true);<newline />
					            document.setFooter(footer);<newline />
					            <newline />
					            // step 4: we add content to the document<newline />
					            <newline />
					            // PAGE 1<newline />
					            <newline />
					            document.add(new Paragraph("Hello World"));<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 2<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Earth"));<newline />
					            <newline />
					            // we remove the header starting from PAGE 3<newline />
					            document.resetHeader();<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 3<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Sun"));<newline />
					            document.add(new Paragraph("Remark: the header has vanished!"));<newline />
					            <newline />
					            // we reset the page numbering<newline />
					            document.resetPageCount();<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 4<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Moon"));<newline />
					            document.add(new Paragraph("Remark: the pagenumber has been reset!"));<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0108">Example 8: Viewerpreferences</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0108.java" color="#008080">source code</anchor> and
					the resulting PDFs: <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0108a.pdf" color="#008080">(a)</anchor>,
					<anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0108b.pdf" color="#008080">(b)</anchor> and
					<anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0108c.pdf" color="#008080">(c)</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					import com.lowagie.text.html.HtmlWriter;<newline />
					<newline />
					public class Chap0108 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 8: Viewerpreferences");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document();<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter writerA = PdfWriter.getInstance(document,<newline />
					                new FileOutputStream("Chap0108a.pdf"));<newline />
					            writerA.setViewerPreferences(PdfWriter.PageLayoutTwoColumnLeft);<newline />
					            PdfWriter writerB = PdfWriter.getInstance(document,<newline />
					                new FileOutputStream("Chap0108b.pdf"));<newline />
					            writerB.setViewerPreferences(PdfWriter.HideMenubar<newline />
					                | PdfWriter.HideToolbar);<newline />
					            PdfWriter writerC = PdfWriter.getInstance(document,<newline />
					                new FileOutputStream("Chap0108c.pdf"));<newline />
					            writerC.setViewerPreferences(PdfWriter.PageLayoutTwoColumnLeft<newline />
					                | PdfWriter.PageModeFullScreen<newline />
					                | PdfWriter.NonFullScreenPageModeUseThumbs);<newline />
					            <newline />
					            // step 3:<newline />
					            <newline />
					            // we add a Watermark that will show up on PAGE 1<newline />
					            try {<newline />
					                Watermark watermark =<newline />
					                    new Watermark(Image.getInstance("watermark.jpg"), 200, 420);<newline />
					                document.add(watermark);<newline />
					            }<newline />
					            catch(Exception e) {<newline />
					                System.err.println("Are you sure you have the file 'watermark.jpg' in the right path?");<newline />
					            }<newline />
					            <newline />
					            // we add a Header that will show up on PAGE 1<newline />
					            HeaderFooter header = new HeaderFooter(new Phrase("This is a header"),<newline />
					                false);<newline />
					            document.setHeader(header);<newline />
					            <newline />
					            // we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // we rotate the page, starting from PAGE 2<newline />
					            document.setPageSize(PageSize.A4.rotate());<newline />
					            <newline />
					            // we need to change the position of the Watermark<newline />
					            try {<newline />
					                Watermark watermark =<newline />
					                    new Watermark(Image.getInstance("watermark.jpg"), 320, 200);<newline />
					                document.add(watermark);<newline />
					            }<newline />
					            catch(Exception e) {<newline />
					                System.err.println("Are you sure you have the file 'watermark.jpg' in the right path?");<newline />
					            }<newline />
					            <newline />
					            // we add a Footer that will show up on PAGE 2<newline />
					            HeaderFooter footer = new HeaderFooter(new Phrase("This is page: "),<newline />
					                true);<newline />
					            document.setFooter(footer);<newline />
					            <newline />
					            // step 4: we add content to the document<newline />
					            <newline />
					            // PAGE 1<newline />
					            <newline />
					            document.add(new Paragraph("Hello World"));<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 2<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Earth"));<newline />
					            <newline />
					            // we remove the header starting from PAGE 3<newline />
					            document.resetHeader();<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 3<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Sun"));<newline />
					            document.add(new Paragraph("Remark: the header has vanished!"));<newline />
					            <newline />
					            // we reset the page numbering<newline />
					            document.resetPageCount();<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 4<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Moon"));<newline />
					            document.add(new Paragraph("Remark: the pagenumber has been reset!"));<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
			<section numberdepth="2">
				<title><anchor name="Chap0109">Example 9: pause() and resume()</anchor></title>
				<paragraph size="9" align="Justify">
					Download the <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0109.java" color="#008080">source code</anchor> and
					the resulting PDFs: <anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0109a.pdf" color="#008080">(a)</anchor> and
					<anchor size="9" reference="http://itext.sourceforge.net/examples/Chap0109b.pdf" color="#008080">(b)</anchor>.
				</paragraph>
				<paragraph size="9" font="Courier" leading="12">
					import java.io.FileOutputStream;<newline />
					import java.io.IOException;<newline />
					<newline />
					import com.lowagie.text.*;<newline />
					import com.lowagie.text.pdf.PdfWriter;<newline />
					import com.lowagie.text.html.HtmlWriter;<newline />
					<newline />
					public class Chap0109 {<newline />
					    <newline />
					    public static void main(String[] args) {<newline />
					        <newline />
					        System.out.println("Chapter 1 example 9: pause() and resume()");<newline />
					        <newline />
					        // step 1: creation of a document-object<newline />
					        Document document = new Document();<newline />
					        <newline />
					        try {<newline />
					            <newline />
					            // step 2:<newline />
					            // we create a writer that listens to the document<newline />
					            // and directs a PDF-stream to a file<newline />
					            <newline />
					            PdfWriter writerA = PdfWriter.getInstance(document,<newline />
					                new FileOutputStream("Chap0109a.pdf"));<newline />
					            <newline />
					            PdfWriter writerB = PdfWriter.getInstance(document,<newline />
					                new FileOutputStream("Chap0109b.pdf"));<newline />
					            <newline />
					            // step 3:<newline />
					            <newline />
					            // we add a Watermark that will show up on PAGE 1<newline />
					            <newline />
					            writerB.pause();<newline />
					            try {<newline />
					                Watermark watermark =<newline />
					                    new Watermark(Image.getInstance("watermark.jpg"), 200, 420);<newline />
					                document.add(watermark);<newline />
					            }<newline />
					            catch(Exception e) {<newline />
					                System.err.println("Are you sure you have the file 'watermark.jpg' in the right path?");<newline />
					            }<newline />
					            <newline />
					            writerB.resume();<newline />
					            <newline />
					            // we add a Header that will show up on PAGE 1<newline />
					            HeaderFooter header = new HeaderFooter(new Phrase("This is a header"),<newline />
					                false);<newline />
					            document.setHeader(header);<newline />
					            <newline />
					            // we open the document<newline />
					            document.open();<newline />
					            <newline />
					            // we rotate the page, starting from PAGE 2<newline />
					            document.setPageSize(PageSize.A4.rotate());<newline />
					            <newline />
					            // we need to change the position of the Watermark<newline />
					            try {<newline />
					                Watermark watermark =<newline />
					                    new Watermark(Image.getInstance("watermark.jpg"), 320, 200);<newline />
					                document.add(watermark);<newline />
					            }<newline />
					            catch(Exception e) {<newline />
					                System.err.println("Are you sure you have the file 'watermark.jpg' in the right path?");<newline />
					            }<newline />
					            <newline />
					            // we add a Footer that will show up on PAGE 2<newline />
					            HeaderFooter footer = new HeaderFooter(<newline />
					                new Phrase("This is page: "), true);<newline />
					            document.setFooter(footer);<newline />
					            <newline />
					            // step 4: we add content to the document<newline />
					            <newline />
					            // PAGE 1<newline />
					            <newline />
					            document.add(new Paragraph("Hello World"));<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 2<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Earth"));<newline />
					            <newline />
					            // we remove the header starting from PAGE 3<newline />
					            <newline />
					            writerA.pause();<newline />
					            document.resetHeader();<newline />
					            <newline />
					            writerA.resume();<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 3<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Sun"));<newline />
					            <newline />
					            writerA.pause();<newline />
					            document.add(new Paragraph("Remark: the header has vanished!"));<newline />
					            <newline />
					            writerA.resume();<newline />
					            <newline />
					            // we reset the page numbering<newline />
					            <newline />
					            writerB.pause();<newline />
					            document.resetPageCount();<newline />
					            <newline />
					            writerB.resume();<newline />
					            <newline />
					            // we trigger a page break<newline />
					            document.newPage();<newline />
					            <newline />
					            // PAGE 4<newline />
					            <newline />
					            // we add some more content<newline />
					            document.add(new Paragraph("Hello Moon"));<newline />
					            <newline />
					            writerB.pause();<newline />
					            document.add(new Paragraph("Remark: the pagenumber has been reset!"));<newline />
					            <newline />
					            writerB.resume();<newline />
					            <newline />
					        }<newline />
					        catch(DocumentException de) {<newline />
					            System.err.println(de.getMessage());<newline />
					        }<newline />
					        catch(IOException ioe) {<newline />
					            System.err.println(ioe.getMessage());<newline />
					        }<newline />
					        <newline />
					        // step 5: we close the document<newline />
					        document.close();<newline />
					    }<newline />
					}
				</paragraph>
			</section>
		</section>
	</chapter>
</itext>
