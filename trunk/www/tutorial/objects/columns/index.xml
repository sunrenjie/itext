<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">ColumnText</site:title>
		<site:summary>How to organize text and data in columns with iText</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, columns, ColumnText, MultiColumnText, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>JAVA</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="Column" standalone="yes" />
			<site:result>column.pdf</site:result>
			<site:description>Defining a simple single object ColumnText object</site:description>
		</site:example>
		<site:example>
			<site:java src="ColumnSimple" standalone="yes" />
			<site:result>columnsimple.pdf</site:result>
			<site:description>Adding phrases to a simple ColumnText object</site:description>
		</site:example>
		<site:example>
			<site:java src="ColumnObjects" standalone="yes" />
			<site:result>columnobjects.pdf</site:result>
			<site:externalresource>cover.png</site:externalresource>
			<site:description>Adding different objects to a simple ColumnText object</site:description>
		</site:example>
		<site:example>
			<site:java src="ColumnIrregular" standalone="yes" />
			<site:result>columnirregular.pdf</site:result>
			<site:externalresource>caesar_coin.jpg</site:externalresource>
			<site:description>Defining an irregular ColumnText object</site:description>
		</site:example>
		<site:example>
			<site:java src="MultiColumnSimple" standalone="yes" />
			<site:result>multicolumnsimple.pdf</site:result>
			<site:description>Defining a simple MultiColumnText object</site:description>
		</site:example>
		<site:example>
			<site:java src="MultiColumnR2L" standalone="yes" />
			<site:result>multicolumnR2L.pdf</site:result>
			<site:description>Defining a MultiColumnText object that adds its columns from right to left</site:description>
		</site:example>
		<site:example>
			<site:java src="MultiColumnIrregular" standalone="yes" />
			<site:result>multicolumnirregular.pdf</site:result>
			<site:description>Defining an irregular MultiColumnText object</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
			
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="7" />
		</site:book>
		</div>
	</site:section>
	<site:section name="introduction">
		<site:sectiontitle>Columns</site:sectiontitle>
<div>If you want to use iText to make product sheets, articles, newspaper pages, etc...
you will probably want to present your data in columns.
That's why the objects <site:doc class="com.lowagie.text.pdf.ColumnText">ColumnText</site:doc>
and <site:doc class="com.lowagie.text.pdf.MultiColumnText">MultiColumnText</site:doc> were created.<br />
With these objects you can add content within a given rectangle (or a userdefined irregular shape)
and this content will be wrapped automatically when the right limit of the rectangle is reached
(or it will be formatted to fit the irregular shape). All content that doesn't fit
isn't shown, but it remains in the column object so that you can display it in
a next column.<br /><br />
<div class="subtitle">ColumnText</div>
To show a certain phrase, centered in a rectangle between the coordinates (100, 300) and (200, 500), we write some code like this:
<pre class="commandline">PdfContentByte cb = writer.getDirectContent();
ColumnText ct = new ColumnText(cb);
ct.setSimpleColumn(phrase,
  100, 300, 200, 500, 15,
  Element.ALIGN_CENTER);
ct.go();</pre>
<site:doc class="com.lowagie.text.pdf.ColumnText" target="setSimpleColumn(com.lowagie.text.Phrase,%20float,%20float,%20float,%20float,%20float,%20int)">setSimpleColumn(com.lowagie.text.Phrase, float, float, float, float, float, int)</site:doc>.
This specific method only works with content in a
<site:tutorial chapter="/objects" section="phrase">Phrase</site:tutorial>,
but there are lots of methods in class ColumnText that allow you to specify
indentation etc...
<site:source class="Column" />
It isn't necessary to add the text all at once in one Phrase object.
You can first define the rectangle with
<site:doc class="com.lowagie.text.pdf.ColumnText" target="setSimpleColumn(float,%20float,%20float,%20float,%20float)">setSimpleColumn(float, float, float, float, float)</site:doc> or
<site:doc class="com.lowagie.text.pdf.ColumnText" target="setSimpleColumn(float,%20float,%20float,%20float,%20float,%20int)">setSimpleColumn(float, float, float, float, float, int)</site:doc>,
then add some text with
<site:doc class="com.lowagie.text.pdf.ColumnText" target="addText(com.lowagie.text.Chunk)">addText(com.lowagie.text.Chunk)</site:doc> or
<site:doc class="com.lowagie.text.pdf.ColumnText" target="addText(com.lowagie.text.Phrase)">addText(com.lowagie.text.Phrase)</site:doc>
and show the column with the <site:doc class="com.lowagie.text.pdf.ColumnText" target="go()">go()</site:doc>-method:
<pre class="commandline">PdfContentByte cb = writer.getDirectContent();
ColumnText ct = new ColumnText(cb);
ct.setSimpleColumn(60, 300, 100, 500, 15, Element.ALIGN_CENTER);
ct.addText(phrase1);
ct.addText(phrase2);
ct.addText(chunk);
ct.go();</pre>
<site:source class="ColumnSimple" />
Of course, if there is more text than space in the rectangle,
we don't want to loose the text that didn't fit. Maybe we want
this text to be shown in another column. That's why we are going
to take a look at the return value of the <site:doc class="com.lowagie.text.pdf.ColumnText" target="go()">go()</site:doc>-method.
If this return value has the flag '<site:doc class="com.lowagie.text.pdf.ColumnText" target="NO_MORE_COLUMN">NO_MORE_COLUMN</site:doc>' turned
on, there wasn't enough room for the text in the column. If all the text was shown,
the flag '<site:doc class="com.lowagie.text.pdf.ColumnText" target="NO_MORE_TEXT">NO_MORE_TEXT</site:doc>' is on.<br />
<site:doc class="com.lowagie.text.pdf.ColumnText" target="go()">go()</site:doc> causes (partial or complete) content to be written
to the document. If you first want to check if the content will fit the rectangle you defined, use
<site:doc class="com.lowagie.text.pdf.ColumnText" target="go(boolean)">go(true)</site:doc>
instead of <site:doc class="com.lowagie.text.pdf.ColumnText" target="go()">go()</site:doc>.
This will simulate adding content. Check if NO_MORE_TEXT or NO_MORE_COLUMN is returned and
decide if you actually want to add the column or if you want to change its size first.<br />
The next example gives you a column to which all kinds of objects were added with method
<site:doc class="com.lowagie.text.pdf.ColumnText" target="addElement(com.lowagie.text.Element)">addElement(com.lowagie.text.Element)</site:doc>.
<site:source class="ColumnObjects" />
ColumnText can also be used to fit content in irregular, user-defined shapes.
Use method <site:doc class="com.lowagie.text.pdf.ColumnText" target="setColumns(float[],%20float[])">setColumns(float[], float[])</site:doc>
to define a left and right boundary for the text:
<pre class="commandline">float[] left  = {70,790, 70,60};
float[] right = {300,790, 300,700, 240,700, 240,590, 300,590, 300,106, 270,60};
ct.setColumns(left, right);</pre>
The left border is a straight line (x = 70), but the right border is irregular.
<site:source class="ColumnIrregular" />
<div class="subtitle">MultiColumnText</div>
If you want to add multiple columns automatically, you can use class
<site:doc class="com.lowagie.text.pdf.MultiColumnText">MultiColumnText</site:doc>.
It's a wrapper for <site:doc class="com.lowagie.text.pdf.ColumnText">ColumnText</site:doc>
that does a lot of work in your place. With
<site:doc class="com.lowagie.text.pdf.MultiColumnText" target="addRegularColumns(float,%20float,%20float,%20int)">addRegularColumns(left, right, gutterWidth, numColumns)</site:doc>,
you define that a page should have <span class="commandline">numColumns</span> columns, with <span class="commandline">gutterWidth</span> space between them.
The first column has <span class="commandline">left</span> space to the left; the last column <span class="commandline">right</span> space to the right.
If you want iText to take care of the distribution of columns over multiple pages, you create the object like this:
<pre class="commandline">MultiColumnText mct = new MultiColumnText();</pre>
Otherwise, you specify the height of the column and a Y position; and you will have to check if all the text was displayed.
<site:source class="MultiColumnSimple" />
If, for some reason, you want to add the columns from right to left, take a look at this example:
<site:source class="MultiColumnR2L" />
MultiColumnText can also be used for irregular columns.
Just add one or more columns with
<site:doc class="com.lowagie.text.pdf.MultiColumnText" target="addColumn(float[],%20float[])">addColumn(float[],%20float[])</site:doc>,
the way you would do it with
<site:doc class="com.lowagie.text.pdf.ColumnText" target="setColumns(float[],%20float[])">ColumnText.setColumns(float[], float[])</site:doc>.
<site:source class="MultiColumnIrregular" />
You see that we used another constructor for this last example.
We could have use automatic distribution over different pages (and add the diamond shape
using a PageEvent), but instead we created the MultiColumnText object like this:
<pre class="commandline">MultiColumnText mct = new MultiColumnText(document.top() - document.bottom());</pre>
The parameter defines a maximum height for the column. If you do this, the columns will not
automatically be distributed over different pages! You will need to use a loop:
<pre class="commandline">do {
    document.add(mct);
    mct.nextColumn();
    document.newPage();
} while (mct.isOverflow());</pre>
</div>
	</site:section>
	</site:chapter>

</site:page>