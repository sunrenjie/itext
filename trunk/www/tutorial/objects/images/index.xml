<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Images</site:title>
		<site:summary>Deals with all types of images that are supported by iText</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, tiff, gif, jpeg, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:keyword>GIF</site:keyword>
			<site:keyword>JPEG</site:keyword>
			<site:keyword>TIFF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="Images" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:externalresource>iText.bmp</site:externalresource>
			<site:externalresource>pngnow.png</site:externalresource>
			<site:externalresource>iText.tif</site:externalresource>
			<site:externalresource>getacro.gif</site:externalresource>
			<site:externalresource>iText.wmf</site:externalresource>
			<site:result>Images.pdf</site:result>
			<site:description>Adds different formats of images to a document.</site:description>
		</site:example>
		<site:example>
			<site:java src="RawData" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:result>rawdata.pdf</site:result>
			<site:description>Using raw image data to construct an Image object.</site:description>
		</site:example>
		<site:example>
			<site:java src="AwtImage" standalone="yes" />
			<site:externalresource>H.gif</site:externalresource>
			<site:result>awt_image.pdf</site:result>
			<site:description>Using a java.awt.Image object to construct an Image object.</site:description>
		</site:example>
		<site:example>
			<site:java src="Alignment" standalone="yes" />
			<site:externalresource>vonnegut.gif</site:externalresource>
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:externalresource>hitchcock.png</site:externalresource>
			<site:result>alignment.pdf</site:result>
			<site:description>Alignment of images.</site:description>
		</site:example>
		<site:example>
			<site:java src="ImagesAlignment" standalone="yes" />
			<site:externalresource>vonnegut.gif</site:externalresource>
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:externalresource>hitchcock.png</site:externalresource>
			<site:result>imagesAlignment.pdf</site:result>
			<site:description>Alignment and wrapping of images.</site:description>
		</site:example>
		<site:example>
			<site:java src="ImageSequence" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:externalresource>getacro.gif</site:externalresource>
			<site:result>inSequence.pdf</site:result>
			<site:result>notInSequence.pdf</site:result>
			<site:description>Adds images to a document, once respecting the order in which they were added, once in the default order.</site:description>
		</site:example>
		<site:example>
			<site:java src="AbsolutePositions" standalone="yes" />
			<site:externalresource>hitchcock.png</site:externalresource>
			<site:result>absolutepositions.pdf</site:result>
			<site:description>Adding an Image at absolute positions.</site:description>
		</site:example>
		<site:example>
			<site:java src="Scaling" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:result>scaling.pdf</site:result>
			<site:description>Scaling images.</site:description>
		</site:example>
		<site:example>
			<site:java src="DvdCover" standalone="yes" />
			<site:externalresource>sunflower-front.jpg</site:externalresource>
			<site:externalresource>sunflower-back.jpg</site:externalresource>
			<site:argument>dvdcover.pdf</site:argument>
			<site:argument>My Sunflower Movie</site:argument>
			<site:argument>808080</site:argument>
			<site:argument>sunflower-front.jpg</site:argument>
			<site:argument>sunflower-back.jpg</site:argument>
			<site:result>dvdcover.pdf</site:result>
			<site:description>Make a DVD Cover.</site:description>
		</site:example>
		<site:example>
			<site:java src="Rotating" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:result>rotating.pdf</site:result>
			<site:description>Rotating images.</site:description>
		</site:example>
		<site:example>
			<site:java src="AnnotatedImage" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:externalresource>iText.wmf</site:externalresource>
			<site:result>annotated_images.pdf</site:result>
			<site:description>images and annotations.</site:description>
		</site:example>
		<site:example>
			<site:java src="ImageChunks" standalone="yes" />
			<site:externalresource>pngnow.png</site:externalresource>
			<site:result>imageChunks.pdf</site:result>
			<site:description>Images wrapped in a Chunk.</site:description>
		</site:example>
		<site:example>
			<site:java src="ImageMasks" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:result>maskedImages.pdf</site:result>
			<site:description>Applying a mask to an image.</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	
			
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="5" />
		</site:book>
		</div>
	</site:section>
	<site:section name="intro">
		<site:sectiontitle>Images</site:sectiontitle>
<div>
iText supports different kinds of image formats (even formats that aren't limited to images):
<ul>
<li><b>JPEG:</b> Joint Photographic Experts Group. Commonly used to refer to a lossy compression technique, reducing the size of a graphic file by as much as 96%. Usually the best file format for photographs on the Web.</li>
<li><b>GIF:</b> Graphic Interchange Format. A common format for image files, especially suitable for images containing large areas of the same color. GIF format files of simple images are often smaller than the same file would be if stored in JPEG format, but GIF format does not store photographic images as well as JPEG.</li>
<li><b>PNG:</b> Portable Network Graphics. A graphics format designed as the successor to GIF. It features compression, transparency, and progressive loading, like GIF, but it is free of patent restrictions.</li>
<li><b>TIFF:</b> Tagged Image File Format. A file format commonly used for digital scanned images.</li>
<li><b>BMP:</b> Windows bitmap. A common form of bitmap file in Microsoft Windows. Poorly supported by other operating systems and with limited support for colour.</li>
<li><b>WMF:</b> Windows Metafile Format. A vector graphics format for Windows-compatible computers used mostly for word-processing clip art.</li>
<li>basic support for <b>EPS:</b> Encapsulated PostScript; a graphics format that describes an image in the PostScript language.</li>
<li><b>java.awt.Image:</b> a JAVA object that is in the JDK from SUN</li>
<li><b>com.lowagie.text.pdf.PdfTemplate:</b> a sequence of PDF syntax, defined in a PdfTemplate can be wrapped in an Image</li>
<li><b>com.lowagie.text.pdf.Barcode:</b> an abstract class, check the <site:tutorial chapter="/objects/images/tiff" section="barcode">implementing classes</site:tutorial> to know what types of barcodes are supported</li>
</ul>
An Image can be created with one of the
<site:doc class="com.lowagie.text.Image" target="getInstance(java.lang.String)">getInstance</site:doc>-methods.
<site:doc class="com.lowagie.text.Image">Image</site:doc> is an abstract class, so the getInstance method will detect the type of the given image (Jpeg, WMF,...) and return the corresponding object (<site:doc class="com.lowagie.text.Jpeg">Jpeg</site:doc>, <site:doc class="com.lowagie.text.ImgWMF">ImgWMF</site:doc>,...).
Lots of PDF libraries decompress images and change them into a Bitmap-like format before adding them to the PDF-file. This approach is avoided in iText, because it results in huge PDF files. The size of the resulting file is tens of times larger than the sum of the different images. This is not the case with iText. Identical Images are also reused (there's only one Image XObject) to save space.
<site:source class="Images" />
The most common way to get an Image instance, is to use the path to the file (<site:doc class="com.lowagie.text.Image" target="getInstance(java.lang.String)">getInstance(java.lang.String)</site:doc>) or the URL (<site:doc class="com.lowagie.text.Image" target="getInstance(java.net.URL)">getInstance(java.net.URL)</site:doc>),
but you can also create an Image using the raw image data (for instance if you have an Image stored in a database):
<site:source class="RawData" />
As iText is a JAVA library, the java.awt.Image object is also supported, but be careful when you are using this functionality on UNIX/Linux systems.
As you know you may need some special X requirements when using the java.awt.Toolkit for creating a java.awt.Image.
If you stick to com.lowagie.text.Image, you don't need this extra requirement; you can use com.lowagie.text.Image on every platform.
<site:source class="AwtImage" />
</div>
	</site:section>
	<site:section name="alignment">
		<site:sectiontitle>Image alignment</site:sectiontitle>
<div>
You can set the alignment of an image with
<site:doc class="com.lowagie.text.Image" target="setAlignment(int)">setAlignment(int)</site:doc>.
As parameter, you can use one of the self explaining constants
<site:doc class="com.lowagie.text.Image" target="LEFT">LEFT</site:doc>,
<site:doc class="com.lowagie.text.Image" target="RIGHT">RIGHT</site:doc> or
<site:doc class="com.lowagie.text.Image" target="MIDDLE">MIDDLE</site:doc>
<site:source class="Alignment" />
You can combine these alignment constants with
<site:doc class="com.lowagie.text.Image" target="TEXTWRAP">TEXTWRAP</site:doc> or
<site:doc class="com.lowagie.text.Image" target="UNDERLYING">UNDERLYING</site:doc>.
With the first constant, you can have the text wrapped around the image.
With the second constant, you specify that the text should cover the image.
Both constants are illustrated in the following example:
<site:source class="ImagesAlignment" />
If you don't specify an absolute position for the image, iText tries to add it
at the position of the current pointer. However, it is not certain that there will
be enough space to add the image. In that case iText postpones adding the image and
adds other content first. If you really want the Image to be added at the moment
you are calling the add-method, you have to set the writer to use the strict image sequence:
<pre class="commandline">writer.setStrictImageSequence(true);</pre>
Look at the example to see the difference between the default behaviour of iText
and the behaviour when the strict image sequence is set:
<site:source class="ImageSequence" />
</div>
	</site:section>
	<site:section name="transformations">
		<site:sectiontitle>Image transformations</site:sectiontitle>
<div>
You can also add an Image at an absolute position on the page, regardless of the other content.
In the chapter on <site:tutorial chapter="/directcontent/coordinates">coordinate systems</site:tutorial>
the mechanisms of the transformation matrix that allow you to do this are explained in detail,
but maybe that's overkill. You probably don't need all that math. You will probably only need
simple translations, some scaling or basic rotating.<br /><br />
<div class="subtitle">Translation</div>
One thing you must know about the coordinate system is the place of the origin:
it's in the lower left corner. The parameters of the method
<site:doc class="com.lowagie.text.Image" target="setAbsolutePosition(float,%20float)">setAbsolutePosition(float, float)</site:doc>
define the lowerleft corner of the image.
<site:source class="AbsolutePositions" />
<div class="subtitle">Scaling</div>
If you want to scale the image to a size of your own choice, use on of the
<site:doc class="com.lowagie.text.Image" target="scaleAbsolute(float,%20float)">scaleAbsolute[Width|Height]</site:doc>-methods.
If you want to scale the image to a certain percentage, use on of the
<site:doc class="com.lowagie.text.Image" target="scalePercent(float)">scalePercent</site:doc>-methods.<br />
Note that the resolution of an image that is added without scaling will be 72dpi by default.
If an image is placed with a scaling of 50% the the resolution will be 144.
With lower scalings the resolution will increase because the pixels are the same but the size will be smaller.
To put a picture with 300dpi use a scaling of 72/300=24%. For instance: if you have a 5X5 inch image that
you scan at 300 dpi, the resultant image is 1500X1500 pixels (5X300 = 1500). When you place this image
in the pdf with a scaling of 24% (72/300 = 0.24), the image in the pdf will be 5X5 inch with 1500X1500 pixel at 300 dpi.
The image will always be 1500X1500 pixel whatever the size.
<site:source class="Scaling" />
Another useful method for scaling is
<site:doc class="com.lowagie.text.Image" target="scaleToFit(float,%20float)">scaleToFit</site:doc>.
This method will scale the image to fit a rectangle, but will keep the XY-ratio intact.
Note that the Images used for the next example are not my own. They are used by courtesy of
<a href="http://www.bigfoto.com">www.bigfoto.com</a>.
<site:source class="DvdCover" />
<div class="subtitle">Rotating</div>
You can rotate an Image with one of these methods:
<site:doc class="com.lowagie.text.Image" target="setRotation(float)">setRotation(float)</site:doc> (angle in radians) or
<site:doc class="com.lowagie.text.Image" target="setRotationDegrees(float)">setRotationDegrees(float)</site:doc> (angle in degrees).
<site:source class="Rotating" />
</div>
	</site:section>
	
	<site:section name="special">
		<site:sectiontitle>Some special features</site:sectiontitle>
<div>
<div class="subtitle">Clickable images</div>
If you want a clickable image or you want to add an annotation to an image, you have to construct an Annotation-object and add it to the image. You don't need to specify a position (you can take 0, 0, 0, 0). The position will be internally updated to fit the image.
See the method <site:doc class="com.lowagie.text.Image" target="setAnnotation(com.lowagie.text.Annotation)">setAnnotation(com.lowagie.text.Annotation)</site:doc>
and the chapter on <site:tutorial chapter="/objects/anchors" section="annotation">annotations</site:tutorial>.
<site:source class="AnnotatedImage" />
<div class="subtitle">Image inside a Chunk</div>
 In some cases it can be handy to wrap an image inside a <site:tutorial chapter="/objects/chunk">Chunk</site:tutorial>. Just create a Chunk with an image and an offset
 with one of the <site:doc class="com.lowagie.text.Chunk" target="Chunk(com.lowagie.text.Image,%20float,%20float)">Chunk constructors</site:doc> that take an Image as parameter.
<site:source class="ImageChunks" />
<div class="subtitle">Image masks</div>
You can create an Image that can be used as mask, making another image transparent:
<table border="0" cellpadding="0" cellspacing="1">
<tr>
    <td bgcolor="#c0c0c0" width="10"> </td>
    <td bgcolor="#c0c0c0" width="10"> </td>
    <td bgcolor="#000000" width="10"> </td>
    <td bgcolor="#000000" width="10"> </td>
    <td bgcolor="#000000" width="10"> </td>
    <td bgcolor="#000000" width="10"> </td>
    <td bgcolor="#c0c0c0" width="10"> </td>
    <td bgcolor="#c0c0c0" width="10"> </td>
    <td>3C</td>
</tr>
<tr>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td>7E</td>
</tr>
<tr>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td>E7</td>
</tr>
<tr>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td>C3</td>
</tr>
<tr>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td>C3</td>
</tr>
<tr>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td>E7</td>
</tr>
<tr>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td>7E</td>
</tr>
<tr>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#000000"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td bgcolor="#c0c0c0"> </td>
    <td>3C</td>
</tr>
</table>
This image has a size of 8 by 8 pixels, 1 component and 1 byte per component.
Using the method <site:doc class="com.lowagie.text.Image" target="makeMask()">makeMask()</site:doc>, it can be turned into a mask:
<pre class="commandline">byte maskr[] =
   {(byte)0x3c,
    (byte)0x7e,
    (byte)0xe7,
    (byte)0xc3,
    (byte)0xc3,
    (byte)0xe7,
    (byte)0x7e,
    (byte)0x3c};
Image mask = Image.getInstance(8, 8, 1, 1, maskr);
mask.makeMask();
mask.setInvertMask(true);</pre>
We can use this mask for explicit masking to clip some parts of an image:
<pre class="commandline">PdfContentByte cb = writer.getDirectContent();
Image image = Image.getInstance("vonnegut.gif");
image.setImageMask(mask);</pre>
In the chapter on
<site:tutorial chapter="/directcontent/colors" section="patterns">colors and patterns</site:tutorial>,
the concept of stencil masks is discussed. You can use the mask we created from an Image for stencil masking:
<pre class="commandline">PdfContentByte cb = writer.getDirectContent();
cb.setRGBColorFill(255, 0, 0);
cb.addImage(mask, mask.scaledWidth() * 8, 0, 0, mask.scaledHeight() * 8, 100, 400);</pre>
(Note that for the addImage method, you will need to read more about <site:tutorial chapter="/directcontent/coordinates">coordinate systems</site:tutorial>...)
<site:source class="ImageMasks" />
<div class="subtitle">Selected examples</div>
EPS, Tiff and barcode functionality is discussed in a <site:tutorial chapter="/objects/images/tiff">separate chapter</site:tutorial>.
</div>
	</site:section>
	</site:chapter>
</site:page>