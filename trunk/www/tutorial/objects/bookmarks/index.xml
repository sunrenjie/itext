<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Viewerpreferences, Pagelabels, Optional Content and Bookmarks</site:title>
		<site:summary>Deals with all the PDF Viewerpreferences, Bookmarks, Outlines, Destinations,... functionality</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, pagelabels, viewerpreferences, bookmarks, outlines, destinations, Chapter, Section, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:book asin="3540608540">Postscript and Acrobat/Pdf Bible: Applications, Troubleshooting and Cross-Platform Publishing</site:book>
			<site:keyword>PDF</site:keyword>
			<site:keyword>JAVA</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
		<site:author>Paulo Soares</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="ViewerPreferences" standalone="yes" />
			<site:result>TwoColumnLeft.pdf</site:result>
			<site:result>HideMenuToolbar.pdf</site:result>
			<site:result>FullScreen.pdf</site:result>
			<site:result>WithTitle.pdf</site:result>
			<site:result>NoScaling.pdf</site:result>
			<site:description>Creates five versions of the same document, but with different viewerpreferences</site:description>
		</site:example>
		<site:example>
			<site:java src="PageLabels" standalone="yes" />
			<site:result>PageLabels.pdf</site:result>
			<site:description>Creates a document with pagelabels</site:description>
		</site:example>
		<site:example>
			<site:java src="Layers" standalone="yes" />
			<site:result>Layers.pdf</site:result>
			<site:description>Creates a document with text in different layers</site:description>
		</site:example>
		<site:example>
			<site:java src="Bookmarks" standalone="yes" />
			<site:result>Bookmarks.pdf</site:result>
			<site:description>Creates a document with Bookmarks for every new Paragraph that is added</site:description>
		</site:example>
		<site:example>
			<site:java src="Destinations" standalone="yes" />
			<site:result>Destinations.pdf</site:result>
			<site:description>Creates a document with destinations that can be called from Bookmarks</site:description>
		</site:example>
		<site:example>
			<site:java src="OutlineActions" standalone="yes" />
			<site:result>OutlineActions.pdf</site:result>
			<site:result>remote.pdf</site:result>
			<site:description>Creates a document with external destinations or actions that can be called from Bookmarks</site:description>
		</site:example>
		<site:example>
			<site:java src="ChapterSection" standalone="yes" />
			<site:result>ChapterSection.pdf</site:result>
			<site:description>Creates a document with Chapters and Sections (automatic outlines)</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
			
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="4" />
			<site:bookchapter chapter="13" />
			<site:bookchapter chapter="15" />
		</site:book>
		</div>
	</site:section>
	<site:section name="viewerprefs">
		<site:sectiontitle>Viewerpreferences</site:sectiontitle>
<div>
Every end user can change his viewerpreferences in Acrobat, but as producer of PDF documents,
you can add some viewerpreferences to the document. This can be done with the method
<site:doc class="com.lowagie.text.pdf.PdfWriter" target="setViewerPreferences(int)">setViewerPreferences()</site:doc>.
The parameter can be composed by ORing some of the constants that are explained below:
<pre class="commandline">writer1.setViewerPreferences(PdfWriter.PageLayoutTwoColumnLeft);
writer2.setViewerPreferences(PdfWriter.HideMenubar
	| PdfWriter.HideToolbar);
writer3.setViewerPreferences(PdfWriter.PageLayoutTwoColumnRight
	| PdfWriter.PageModeFullScreen
	| PdfWriter.NonFullScreenPageModeUseThumbs);
writer4.setViewerPreferences(PdfWriter.DisplayDocTitle);</pre>
<site:source class="ViewerPreferences" />
This is the list with viewerpreferences that are supported in iText:
<ul>
<li>The page layout to be used when the document is opened (choose one).
<ul>
<li><b>PageLayoutSinglePage</b> - Display one page at a time. (default)</li>
<li><b>PageLayoutOneColumn</b> - Display the pages in one column.</li>
<li><b>PageLayoutTwoColumnLeft</b> - Display the pages in two columns, with oddnumbered pages on the left.</li>
<li><b>PageLayoutTwoColumnRight</b> - Display the pages in two columns, with oddnumbered pages on the right.</li>
</ul>
</li>

<li>The page mode how the document should be displayed when opened (choose one).
<ul>
<li><b>PageModeUseNone</b> - Neither document outline nor thumbnail images visible. (default)</li>
<li><b>PageModeUseOutlines</b> - Document outline visible.</li>
<li><b>PageModeUseThumbs</b> - Thumbnail images visible.</li>
<li><b>PageModeFullScreen</b> - Full-screen mode, with no menu bar, window controls, or any other window visible.</li>
<li><b>PageModeUseOC</b> - Optional content group panel visible</li>
</ul>
</li>

<li><b>HideToolbar</b> - A flag specifying whether to hide the viewer application's tool bars when the document is active.</li>
<li><b>HideMenubar</b> - A flag specifying whether to hide the viewer application's menu bar when the document is active.</li>
<li><b>HideWindowUI</b> - A flag specifying whether to hide user interface elements in the document's window (such as scroll bars and navigation controls), leaving only the document's contents displayed.</li>
<li><b>FitWindow</b> - A flag specifying whether to resize the document's window to fit the size of the first displayed page.</li>
<li><b>CenterWindow</b> - A flag specifying whether to position the document's window in the center of the screen.</li>
<li><b>DisplayDocTitle</b> - A flag specifying whether to display the document's title in the top bar.</li>

<li>The predominant reading order for text. This entry has no direct effect on the document's contents or page numbering, but can be used to determine the relative positioning of pages when displayed side by side or printed <i>n-up</i> (choose one).
<ul>
<li><b>DirectionL2R</b> - Left to right</li>
<li><b>DirectionR2L</b> - Right to left (including vertical writing systems such as Chinese, Japanese, and Korean)</li>
</ul>
</li>

<li>The document's page mode, specifying how to display the document on exiting full-screen mode. It is meaningful only if the page mode is <b>PageModeFullScreen</b> (choose one).
<ul>
<li><b>NonFullScreenPageModeUseNone</b> - Neither document outline nor thumbnail images visible</li>
<li><b>NonFullScreenPageModeUseOutlines</b> - Document outline visible</li>
<li><b>NonFullScreenPageModeUseThumbs</b> - Thumbnail images visible</li>
<li><b>NonFullScreenPageModeUseOC</b> - Optional content group panel visible</li>
</ul>
</li>
<li><b>PrintScalingNone</b> - Sets the print scaling to 'None'</li>
</ul>
</div>
	</site:section>
	<site:section name="pagelabels">
		<site:sectiontitle>Pagelabels</site:sectiontitle>
<div>
If you set the viewerpreferences to mode PageModeUseThumbs,
you get a 'thumbnails' view of you document, showing a small version of every page.
Under each thumbnail, you have a label.
If you want to change the style of these page labels, you have to create a <site:doc class="com.lowagie.text.pdf.PdfPageLabels">PdfPageLabels object</site:doc>
and add a new style, content or pagenumber value, starting from a certain 'real' pagenumber.<br />
These are the different styles you can use:
<ul>
<li>PdfPageLabels.DECIMAL_ARABIC_NUMERALS</li>
<li>PdfPageLabels.UPPERCASE_ROMAN_NUMERALS</li>
<li>PdfPageLabels.LOWERCASE_ROMAN_NUMERALS</li>
<li>PdfPageLabels.UPPERCASE_LETTERS</li>
<li>PdfPageLabels.LOWERCASE_LETTERS</li>
<li>PdfPageLabels.EMPTY</li>
</ul>
<pre class="commandline">pageLabels.addPageLabel(1, PdfPageLabels.LOWERCASE_ROMAN_NUMERALS);
pageLabels.addPageLabel(5, PdfPageLabels.DECIMAL_ARABIC_NUMERALS);
pageLabels.addPageLabel(8, PdfPageLabels.DECIMAL_ARABIC_NUMERALS, "A-", 8);</pre>
The first line says that the labels starting on the 'real' page 1 should be lowercase roman numerals.
The second line says that the labels starting on the 'real' page 5 should be arabic numerals. The labels will start at 1, so the real page 5 will be labeled with the the 'logical pagenumber' 1.
The third line says that the labels starting on the 'real' page 8 should be arabic numbers, prefixed with the String "A-". The logical numbering should start with page 8 (otherwise the first label would be "A-1").
<site:source class="PageLabels" />
</div>
	</site:section>
	<site:section name="layers">
		<site:sectiontitle>Optional Content</site:sectiontitle>
<div>
If you set the viewerpreferences to mode PageModeUseOC (only since PDF version 1.5), you will be able to turn on or off different layers in the document.
You can read all about these layers in the chapter on <site:tutorial chapter="directcontent/optionalcontent">Optional Content</site:tutorial>.
<site:source class="Layers" />
</div>
	</site:section>
	<site:section name="bookmarks">
		<site:sectiontitle>Bookmarks</site:sectiontitle>
<div>
If you set the viewerpreferences to mode PageModeUseOutlines, you get an outline tree that can be used as a Table-Of-Content or as a list with bookmarks.
To construct this outline tree, you need to get the rootoutline from the writer object. To this root, you can add, new <site:doc class="com.lowagie.text.pdf.PdfOutline">PdfOutline</site:doc> objects:
<pre class="commandline">PdfOutline root = writer.getDirectContent().getRootOutline();
new PdfOutline(cb.getRootOutline(), someDestination, "a bookmark");</pre>
In the <site:tutorial chapter="/objects/bookmarks" section="destinations">next section</site:tutorial>, you will learn how to create objects such as 'someDestination'.
In the example below, we use PageEvents to add an entry to the outline tree every time a new Paragraph is added to the document.
<site:source class="Bookmarks" />
</div>
	</site:section>
	
		<site:section name="destinations">
		<site:sectiontitle>Creating Destinations</site:sectiontitle>
<div>
In the chapter on <site:tutorial chapter="/objects/anchors" section="localgoto">Anchors</site:tutorial>,
we already defined destinations, by giving a name to a Chunk object (<site:doc class="com.lowagie.text.Chunk" target="setLocalDestination(java.lang.String)">setLocalDestination</site:doc>).
The position on the page of this Chunk defined the destination.<br />
In this section, we are going to create destinations of the types:
Destination.XYZ, Destination.FIT, Destination.FITH, Destination.FITV, Destination.FITR, Destination.FITB, Destination.FITBH or Destination.FITBV,
using one of the following constructors:
<ul>
<li><site:doc class="com.lowagie.text.pdf.PdfDestination" target="PdfDestination(int)">public PdfDestination(int type)</site:doc>
can be used for types FIT and FITB.
<b>FIT</b> points to the current page, with its contents magnified just enough to fit the entire page within the window
both horizontally and vertically.
<b>FITB</b> does the same, but the contents are magnified just enough to fit
its bounding box.</li>
<li><site:doc class="com.lowagie.text.pdf.PdfDestination" target="PdfDestination(int,%20float)">public PdfDestination(int type, float parameter)</site:doc>
can be used for types FITH, FITV, FITBH and FITBV.<br />
If type equals <b>FITBV</b>, the height of the bounding box of a page will fit the window of the Reader.
The parameter will specify the x coordinate of the left edge of the window.<br />
If the type equals <b>FITV</b> the height of the entire page will fit the window and
the parameter will specify the x coordinate of the left edge.<br />
If type equals <b>FITBH</b>, the width of the bounding box of a page will fit the window of the Reader.
The parameter will specify the y coordinate of the top edge of the window.<br />
If the type equals <b>FITH</b> the width of the entire page will fit the window and
the parameter will specify the y coordinate of the top edge.<br />
</li>
<li><site:doc class="com.lowagie.text.pdf.PdfDestination" target="PdfDestination(int,%20float,%20float,%20float)">public PdfDestination(int type, float left, float top, float zoom)</site:doc>
can be used for type <b>XYZ</b> with the coordinates (left, top) as the top-left corner of the destination window
and the contents of the page magnified by the factor zoom.
A negative value for any of the parameters left or top, or a zoom value of 0
specifies that the current value of that parameter is to be retained unchanged.
</li>
<li><site:doc class="com.lowagie.text.pdf.PdfDestination" target="PdfDestination(int,%20float,%20float,%20float,%20float)">public PdfDestination(int type, float left, float bottom, float right, float top)</site:doc>
can be used for type <b>FITR</b> the destination will be a rectangle specified by the coordinates left, bottom, right, and top.
If the required horizontal and vertical magnification factors are different,
use the smaller of the two, centering the rectangle within the window in the other dimension.
</li>
</ul>
When a destination is created, it is not linked to a certain page in the document.
Only when add the destination the outline tree, it will point to the 'current' page.
In the chapter on <site:tutorial chapter="/objects/anchors" section="localgoto">Anchors</site:tutorial>,
we already used some destinations in Actions. Now we are going to use destinations as targets for our bookmarks.
We will draw several crosses on a page and jumps to these crosses from the outline tree.
<pre class="commandline">PdfDestination d1 = new PdfDestination(PdfDestination.XYZ, 300, 800, 0);
PdfDestination d2 = new PdfDestination(PdfDestination.FITH, 500);
PdfDestination d3 = new PdfDestination(PdfDestination.FITR, 200, 300, 400, 500);
PdfDestination d4 = new PdfDestination(PdfDestination.FITBV, 100);
PdfDestination d5 = new PdfDestination(PdfDestination.FIT);</pre>
<site:source class="Destinations" />
</div>
	</site:section>
	<site:section name="outlineactions">
		<site:sectiontitle>Outlines and Actions</site:sectiontitle>
<div>
In the previous examples we used the outline tree to jump to a certain <site:doc class="com.lowagie.text.pdf.PdfDestionation">PdfDestination</site:doc>,
but we can also use a <site:doc class="com.lowagie.text.pdf.PdfOutline" target="constructor_summary">PdfOutline</site:doc> to trigger a
<site:doc class="com.lowagie.text.pdf.PdfAction">PdfAction</site:doc> (see the chapter on <site:tutorial chapter="/objects/anchors" section="actions">Actions</site:tutorial>).
<pre class="commandline">PdfOutline root = writer.getDirectContent().getRootOutline();
new PdfOutline(root,
	new PdfAction("http://www.lowagie.com/iText"), "Bruno's iText site");
new PdfOutline(other,
	PdfAction.javaScript("app.alert('Hello');\r", writer), "Say Hello");</pre>
<site:source class="OutlineActions" />
</div>
	</site:section>
	<site:section name="chapter">
		<site:sectiontitle>the Chapter and Section object</site:sectiontitle>
<div>
If all the examples above are overkill, if you only need a simple tree
with some chapters and (sub)sections, you needn't define destinations and
add them to a rootoutline or a parent outline. You can simply use the
objects <site:doc class="com.lowagie.text.Chapter">Chapter</site:doc> 
and <site:doc class="com.lowagie.text.Section">Section</site:doc>.
They build a tree and number titles automatically.
<pre class="commandline">Paragraph cTitle = new Paragraph("This is chapter 1", chapterFont);
Chapter chapter = new Chapter(cTitle, 1);
Paragraph sTitle = new Paragraph("This is section 1 in chapter 1", sectionFont);
Section section = chapter.addSection(sTitle, 1);</pre>
<div class="subtitle">Some caveats:</div>
<ul>
<li>The content of a complete Chapter (including subsections) is only 'flushed'
to the writer at the moment you add the chapter to the document.
<ul>
<li>avoid mixing Chapter.add() and Document.add invocations.
If you add a Chunk1 to a Chapter first, then a Chunk2 to the document and
finally add the chapter, Chunk2 will come before Chunk1 in the resulting
document.</li>
<li>avoid creating Chapters that are too large: all the chapter content
is kept in memory as long as you don't add the chapter to the doc.</li>
</ul>
</li>
<li>Every chapter starts on a new page automatically. If you want to have
a section within a chapter starting on a new page, you will have to use
<site:doc class="com.lowagie.text.Chunk" target="NEXTPAGE">Chunk.NEXTPAGE</site:doc>.</li>
</ul>
<site:source class="ChapterSection" />
</div>
	</site:section>
	</site:chapter>
</site:page>