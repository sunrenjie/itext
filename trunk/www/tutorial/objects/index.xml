<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Basic Text Objects</site:title>
		<site:summary>Some basic text objects that are used in iText.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, Chunk, Phrase, Paragraph, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>PDF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="Chunks" standalone="yes" />
			<site:result>Chunks.pdf</site:result>
			<site:description>Demonstrates some Chunk functionality</site:description>
		</site:example>
		<site:example>
			<site:java src="DifferentFonts" standalone="yes" />
			<site:result>differentfonts.pdf</site:result>
			<site:description>A Paragraph can contain text in different fonts</site:description>
		</site:example>
		<site:example>
			<site:java src="Paragraphs" standalone="yes" />
			<site:result>Paragraphs.pdf</site:result>
			<site:description>Demonstrates some Paragraph functionality</site:description>
		</site:example>
		<site:example>
			<site:java src="SpaceWordRatio" standalone="yes" />
			<site:result>spacewordratio.pdf</site:result>
			<site:description>Space Word Ratio</site:description>
		</site:example>
		<site:example>
			<site:java src="ParagraphAttributes" standalone="yes" />
			<site:result>ParagraphAttributes.pdf</site:result>
			<site:description>Demonstrates some more Paragraph functionality</site:description>
		</site:example>
		<site:example>
			<site:java src="Phrases" standalone="yes" />
			<site:result>Phrases.pdf</site:result>
			<site:description>Demonstrates the different constructors of class Phrase</site:description>
		</site:example>
		<site:example>
			<site:java src="NegativeLeading" standalone="yes" />
			<site:result>NegativeLeading.pdf</site:result>
			<site:description>Shows the effect of a negative leading</site:description>
		</site:example>
		<site:example>
			<site:java src="SymbolSubstitution" standalone="yes" />
			<site:result>SymbolSubstitution.pdf</site:result>
			<site:description>Demonstrates how special characters are substituted by Symbols with Phrase.getInstance</site:description>
		</site:example>
		<site:example>
			<site:java src="FontSelection" standalone="yes" />
			<site:result>fontselection.pdf</site:result>
			<site:description>Selects the appropriate fonts that contain the glyphs needed to render text correctly</site:description>
		</site:example>
		<site:example>
			<site:java src="Lists" standalone="yes" />
			<site:result>lists.pdf</site:result>
			<site:result>lists.html</site:result>
			<site:description>Demonstrates some List functionality</site:description>
		</site:example>
		<site:example>
			<site:java src="FancyLists" standalone="yes" />
			<site:result>fancylists.pdf</site:result>
			<site:description>Demonstrates some List with Roman numerals, Greek letters, zapfdingbats,...</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
			
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="4" />
			<site:bookchapter chapter="5" />
			<site:bookchapter chapter="6" />
			<site:bookchapter chapter="7" />
		</site:book>
		</div>
	</site:section>
	<site:section name="introduction">
		<site:sectiontitle>Introduction</site:sectiontitle>
<div>
iText is a library that produces PDF, but you don't need to know anything about PDF syntax,
PDF objects, PDF operators or operands to use it (allthough it's possible to add <site:tutorial chapter="/directcontent">direct content</site:tutorial> if you want to).
iText comes with a large number of its own high level objects that can be used to add content to a PDF document.<br />
This is a short (and incomplete) list of iText high-level objects:
<ul>
<li><site:tutorial chapter="/objects/chunk">Chunk</site:tutorial></li>
<li><site:tutorial chapter="/objects" section="paragraph">Paragraph</site:tutorial></li>
<li><site:tutorial chapter="/objects/font">Font</site:tutorial></li>
<li><site:tutorial chapter="/objects/anchor">Anchors</site:tutorial></li>
<li><site:tutorial chapter="/objects/bookmarks">Bookmarks</site:tutorial></li>
<li><site:tutorial chapter="/objects" section="list">List</site:tutorial></li>
<li><site:tutorial chapter="/objects/images">Images</site:tutorial></li>
<li><site:tutorial chapter="/objects/tables">Tables</site:tutorial></li>
<li><site:tutorial chapter="/objects/columns">Columns</site:tutorial></li>
<li>...</li>
</ul>
Remark: some objects such as HeaderFooter and Graphic are not in the list (and not documented) because they are no longer supported.
There are sufficient alternatives for those objects (see for instance
<site:tutorial chapter="/directcontent/pageevents">page events</site:tutorial> and
<site:tutorial chapter="/directcontent/graphics2D">graphics2D</site:tutorial>).
</div>
	</site:section>
	
	<site:section name="chunk">
		<site:sectiontitle>The Chunk object</site:sectiontitle>
<div>
A Chunk is the smallest significant part of text that can be added to a document.
It is the 'atom' building block of most of the other High Level Text objects.
All the contents of a Chunk are of the same font, fontsize, style, color, etc...
For the complete functionality on this object, please read the <site:tutorial chapter="/objects/chunk">chapter on the Chunk object</site:tutorial>.
Functionalities such as subscript, superscript, underline and background are demonstrated in the following example:
<site:source class="Chunks" />
There is a complete chapter on the <site:tutorial chapter="/objects/chunk">Chunk object</site:tutorial> if you need to know more about Chunks.
Also related are the chapters on <site:tutorial chapter="/objects/anchors">Anchors</site:tutorial> and <site:tutorial chapter="/fonts">Fonts</site:tutorial>.
</div>
	</site:section>
	<site:section name="paragraph">
		<site:sectiontitle>The Paragraph object</site:sectiontitle>
<div>
<site:doc class="com.lowagie.text.Paragraph">Paragraph</site:doc> is the text object you are likely to use the most.
It is an ArrayList of one or more other high level elements, such as Chunk, Phrase, List, Image,...
Unlike a Chunk, a Paragraph can contain text in different fonts.
<site:source class="DifferentFonts" />
The most important thing you need to know about paragraph, is that they have a <site:tutorial chapter="/objects/chunk" section="endline">leading</site:tutorial>
and that every new Paragraph starts on a <site:tutorial chapter="/objects/chunk" section="endline">new line</site:tutorial>.
<site:source class="Paragraphs" />
You can set the aligment of a Paragraph with the method
<site:doc class="com.lowagie.text.Paragraph" target="setAlignment(int)">setAlignment(int alignment)</site:doc>.
The alignment can be one of the following values:
<ul>
<li>Element.ALIGN_LEFT</li>
<li>Element.ALIGN_CENTER</li>
<li>Element.ALIGN_RIGHT</li>
<li>Element.ALIGN_JUSTIFIED</li>
</ul>
If you want the alignment to be justified, the space between the words can
be stretched, as well as the space between the characters of a word.
The default ratio of this word-char space is 2.5. You can change this
ratio with <site:doc class="com.lowagie.text.pdf.PdfWriter" target="setSpaceCharRatio(float)">setSpaceCharRatio</site:doc>.
For instance, if you don't want the space between the characters of a word to be stretched, just do:
<pre class="commandline">writer.setSpaceCharRatio(PdfWriter.NO_SPACE_CHAR_RATIO);</pre>
The effect can be seen in the next example (compare page 1 and page 2 of the resulting PDF).
<site:source class="SpaceWordRatio" />
The following methods need no further explanation, they are pretty straightforward:
<ul>
<li><site:doc class="com.lowagie.text.Paragraph" target="setIndentationLeft(float)">setIndentationLeft(float indentation)</site:doc></li>
<li><site:doc class="com.lowagie.text.Paragraph" target="setIndentationRight(float)">setIndentationRight(float indentation)</site:doc></li>
<li><site:doc class="com.lowagie.text.Paragraph" target="setSpacingBefore(float)">setSpacingBefore(float spacing)</site:doc></li>
<li><site:doc class="com.lowagie.text.Paragraph" target="setSpacingAfter(float)">setSpacingAfter(float spacing)</site:doc></li>
</ul>
Remark: the method <site:doc class="com.lowagie.text.Paragraph" target="setFirstLineIndent(float)">setFirstLineIndent(float firstLineIndent)</site:doc>
only works for paragraphs inside a ColumnText or PdfPTable object.
<site:source class="ParagraphAttributes" />
</div>
	</site:section>
	
	<site:section name="phrase">
		<site:sectiontitle>The Phrase Object</site:sectiontitle>
<div>
This extra section deals with the somewhat quirky class <site:doc class="com.lowagie.text.Phrase">Phrase</site:doc>
for the sake of completeness. In most cases you will prefer to use the class <site:doc class="com.lowagie.text.Paragraph">Paragraph</site:doc>.
<site:source class="Phrases" />
The 'leading' parameter is very important for all other High Level Objects in iText, it's the space between two line and should therefore be a positive value.
<site:source class="NegativeLeading" />
You can use a <site:doc class="com.lowagie.text.Phrase" target="constructor_summary">constructor</site:doc> to create a Phrase-object,
but if you have special symbols in your text-string, you can use <site:doc class="com.lowagie.text.Phrase" target="getInstance(String)">Phrase.getInstance</site:doc>
to have your special symbols substituted (this only works with the base 14 fonts, Symbol and ZapfDingBats not included).
<site:source class="SymbolSubstitution" />
A more safe way to do font substitution, is be using class
<site:doc class="com.lowagie.text.pdf.FontSelector">FontSelector</site:doc>:
<site:source class="FontSelection" />
</div>
	</site:section>
		
	<site:section name="list">
		<site:sectiontitle>The List object</site:sectiontitle>
<div>
The <site:doc class="com.lowagie.text.List">List object</site:doc> gives you functionality that is
very similar to the &lt;UL&gt; or &lt;OL&gt; tags in HTML. The iText equivalent of &lt;LI&gt; is
<site:doc class="com.lowagie.text.ListItem">ListItem</site:doc>.<br />
The type of List is chosen with the parameters <span class="commandline">numbered</span>
and <span class="commandline">lettered</span> in the <site:doc class="com.lowagie.text.List" target="constructor_summary">constructor</site:doc>.
You also have to specify a parameter <span class="commandline">symbolIndent</span>. This is the space that will be reserved for the list symbol.
For unordered lists, you can choose any Chunk or String as list symbol with methods
<site:doc class="com.lowagie.text.List" target="setListSymbol(com.lowagie.text.Chunk)">setListSymbol(Chunk symbol)</site:doc> or
<site:doc class="com.lowagie.text.List" target="setListSymbol(java.lang.String)">setListSymbol(String symbol)</site:doc>.
A numbered list always starts with '1', unless you change the first number with
<site:doc class="com.lowagie.text.List" target="setFirst(int)">setFirst(int first)</site:doc>.
The default first character for lists that are ordered with letters is 'A' (uppercase),
you can change it to lower case with method
<site:doc class="com.lowagie.text.List" target="setFirst(char)">setFirst(char first)</site:doc> and pass 'a' as parameter.
<pre class="commandline">List list = new List(true, 20);
list.add(new ListItem("First line"));</pre>
<site:source class="Lists" />
There are some extra classes derived from the <site:doc class="com.lowagie.text.List">List object</site:doc>
that allow you to generate more fancy lists:
<site:doc class="com.lowagie.text.RomanList">RomanList</site:doc>,
<site:doc class="com.lowagie.text.GreekList">GreekList</site:doc>,
<site:doc class="com.lowagie.text.ZapfDingbatsList">ZapfDingbatsList</site:doc> and
<site:doc class="com.lowagie.text.ZapfDingbatsNumberList">ZapfDingbatsNumberList</site:doc>.
Their usage is pretty straightforward:
<site:source class="FancyLists" />
</div>
	</site:section>
	</site:chapter>

</site:page>