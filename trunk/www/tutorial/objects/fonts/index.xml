<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">The Fonts object</site:title>
		<site:summary>Describes the different Font objects in iText.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, Fonts, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:book asin="0201570440">Adobe type 1 font format</site:book>
			<site:keyword>Fonts</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="StandardType1Fonts" standalone="yes" />
			<site:result>StandardType1Fonts.pdf</site:result>
			<site:description>Sums up the 14 Standard Type 1 Fonts</site:description>
		</site:example>
		<site:example>
			<site:java src="FontFactoryType1Fonts" standalone="yes" />
			<site:result>FontFactoryType1Fonts.pdf</site:result>
			<site:description>Sums up the 14 Standard Type 1 Fonts (using the FontFactory)</site:description>
		</site:example>
		<site:example>
			<site:java src="TrueType" standalone="yes" />
			<site:result>truetype.pdf</site:result>
			<site:description>Using a True Type font</site:description>
		</site:example>
		<site:example>
			<site:java src="FullFontNames" standalone="yes" />
			<site:result>fullfontname_arialbi.txt</site:result>
			<site:description>Retrieving the full font name</site:description>
		</site:example>
		<site:example>
			<site:java src="ListEncodings" standalone="yes" />
			<site:result>encodings.txt</site:result>
			<site:description>Asking the font for its available encodings</site:description>
		</site:example>
		<site:example>
			<site:java src="FontEncoding" standalone="yes" />
			<site:result>fontencoding.pdf</site:result>
			<site:description>Using a True Type font that will be embedded in the PDF</site:description>
		</site:example>
		<site:example>
			<site:java src="UnicodeExample" standalone="yes" />
			<site:result>unicode.pdf</site:result>
			<site:description>Using BaseFont.IDENTITY_H as 'encoding'</site:description>
		</site:example>
		<site:example>
			<site:java src="EncodingFont" standalone="yes" />
			<site:result>encodingfont.pdf</site:result>
			<site:description>Using an encoding to display characters from other alphabets</site:description>
		</site:example>
		<site:example>
			<site:java src="RegisterFont" standalone="yes" />
			<site:result>registerfont.pdf</site:result>
			<site:result>registered.txt</site:result>
			<site:description>Registering Fonts with the FontFactory</site:description>
		</site:example>
		<site:example>
			<site:java src="FontFactoryStyles" standalone="yes" />
			<site:result>fontfactorystyles.pdf</site:result>
			<site:description>Changing the style of a fontfactory font</site:description>
		</site:example>
		<site:example>
			<site:java src="UsingFontFactory" standalone="yes" />
			<site:result>FontFactory.pdf</site:result>
			<site:description>Sums up the Fonts that are available in some standard font directories on your system</site:description>
		</site:example>
		<site:example>
			<site:java src="FontStylePropagation" standalone="yes" />
			<site:result>FontStylePropagation.pdf</site:result>
			<site:description>Explains the mechanism of Font Style Propagation</site:description>
		</site:example>
		<site:example>
			<site:java src="WidthHeight" standalone="yes" />
			<site:result>widthheight.pdf</site:result>
			<site:description>Asking a font for the width/height of a textstring</site:description>
		</site:example>
		<site:example>
			<site:java src="FixedFontWidth" standalone="yes" />
			<site:result>fixedfontwidth.pdf</site:result>
			<site:description>Changing the width of the font glyphs</site:description>
		</site:example>
		<site:example>
			<site:java src="ExtraStyles" standalone="yes" />
			<site:result>ExtraStyles.pdf</site:result>
			<site:result>ExtraStyles.rtf</site:result>
			<site:result>ExtraStyles.html</site:result>
			<site:description>Demonstrates how to underline or strike through text</site:description>
		</site:example>
		<site:example>
			<site:java src="FontColor" standalone="yes" />
			<site:result>FontColor.pdf</site:result>
			<site:description>Shows how to change the color of a font</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	<site:section name="font">
		<site:sectiontitle>The Font-class</site:sectiontitle>
<div>
There are 14 standard fonts that should be available by default in each PDF reader.
These fonts are Courier, Courier Bold, Courier Italic (Oblique), Courier Bold and Italic,
Helvetica, Helvetica Bold, Helvetica Italic (Oblique), Helvetica Bold and Italic,
Times Roman, Times Roman Bold, Times Roman Italic, Times Roman Bold and Italic,
Symbol and ZapfDingBats&#174; (see also the chapter on <site:tutorial chapter="/directcontent/fonts">Fonttypes</site:tutorial>).
As you can see the different faces (normal, bold, italic and bolditalic) of the same type face (Courier, Helvetica, Times Roman)
are considered to be different fonts. This is an issue that shall recur further on in this chapter
(so please keep it in mind). iText tries to make these differences more transparant, by asking you
for the font 'family' (Courier, Helvetica, Times Roman) and the font style (normal, bold, italic).<br />
You can construct a Base 14 <site:doc class="com.lowagie.text.Font">Font</site:doc>-object with one
of the simple <site:doc class="com.lowagie.text.Font" target="constructor_summary">constructors</site:doc>
as is done in the next example:
<pre class="commandline">fonts[0] =
  new Font(Font.COURIER, Font.DEFAULTSIZE, Font.NORMAL);
fonts[2] =
  new Font(Font.COURIER, Font.DEFAULTSIZE, Font.BOLD);
fonts[3] =
  new Font(Font.COURIER, Font.DEFAULTSIZE, Font.BOLD | Font.ITALIC);
fonts[7] =
  new Font(Font.HELVETICA, Font.DEFAULTSIZE, Font.BOLDITALIC);
fonts[9] =
  new Font(Font.TIMES_ROMAN, Font.DEFAULTSIZE, Font.ITALIC);</pre>
<site:source class="StandardType1Fonts" />
</div>
	</site:section>
	<site:section name="fontfactory">
		<site:sectiontitle>The FontFactory-class</site:sectiontitle>
<div>
In the next example, we use the class <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc> to create a Font,
as this is the safest and most uniform way to get a new <site:doc class="com.lowagie.text.Font">Font</site:doc>-object
(unless you want to use the mechanism of <site:tutorial chapter="/objects/fonts" section="extrastyles">Font Propagation</site:tutorial>).
<pre class="commandline">fonts[0] =
  FontFactory.getFont(
    FontFactory.COURIER,
    Font.DEFAULTSIZE,
    Font.NORMAL);
fonts[2] =
  FontFactory.getFont(
    FontFactory.COURIER,
    Font.DEFAULTSIZE,
    Font.BOLD);
fonts[3] =
  FontFactory.getFont(
    FontFactory.COURIER,
    Font.DEFAULTSIZE,
    Font.BOLD | Font.ITALIC);
fonts[7] =
  FontFactory.getFont(
    FontFactory.HELVETICA,
    Font.DEFAULTSIZE,
    Font.BOLDITALIC);
fonts[9] =
  FontFactory.getFont(
    FontFactory.TIMES_ROMAN,
    Font.DEFAULTSIZE,
    Font.ITALIC);</pre>
<site:source class="FontFactoryType1Fonts" />
</div>
	</site:section>
	
	<site:section name="basefont">
		<site:sectiontitle>The BaseFont-class</site:sectiontitle>
<div>
The <site:doc class="com.lowagie.text.Font">Font</site:doc>-object returned by
the <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>
is in many cases just a wrapper class for the more complex class
<site:doc class="com.lowagie.text.pdf.BaseFont">BaseFont</site:doc>.
You can create such a basefont directly by using one of the
<site:doc class="com.lowagie.text.pdf.BaseFont" target="createFont(java.lang.String,%20java.lang.String,%20boolean)">BaseFont.createFont</site:doc> methods:
<pre class="commandline">BaseFont helvetica =
  BaseFont.createFont(
    BaseFont.HELVETICA,
    BaseFont.CP1252,
    BaseFont.NOT_EMBEDDED);</pre>
<ol>
<li>The first parameter should the name of the font or the location where it can be found.
On windows systems, most fonts are in the directory C:\WINDOWS\FONTS, so this could be a correct way to construct a basefont object for Arial:
<pre class="commandline">BaseFont arial =
  BaseFont.createFont(
    "C:\\WINDOWS\\FONTS\\ARIAL.TTF",
    BaseFont.CP1252,
    BaseFont.NOT_EMBEDDED);</pre>
<site:source class="TrueType" />
You can ask a font for its full font names. Take a look at the example.
<site:source class="FullFontNames" />
We create a font using the path to its ttf-file.
Then we ask the ttf file for the fontnames.
Later on, we will be able to use the font name without having to know the location of the ttf-file.
</li>
<li>The second parameter is the <i>encoding</i>. A <i>character</i> is an abstract symbol, whereas a <i>glyph</i> is a specific graphical rendering of a character.
For example, the glyphs A, <b>A</b> and <i>A</i> are renderings of the abstract "A" character.
The encoding is the association between the character codes (obtained from text strings) and glyph descriptions.
The same Java character in a Java String object can be rendered in many different ways, depending on the encoding.
Basefont has some default values, but you could use any of the encodings that are available in the font you are using.
<table border="1">
<tr><td><site:doc class="com.lowagie.text.pdf.BaseFont" target="WINANSI">WINANSI</site:doc> = <site:doc class="com.lowagie.text.pdf.BaseFont" target="CP1252">CP1252</site:doc></td><td>Latin 1</td></tr>
<tr><td><site:doc class="com.lowagie.text.pdf.BaseFont" target="CP1250">CP1250</site:doc></td><td>Latin 2: Eastern Europe</td></tr>
<tr><td><site:doc class="com.lowagie.text.pdf.BaseFont" target="CP1257">CP1257</site:doc>1257</td><td>Windows Baltic</td></tr>
<tr><td><site:doc class="com.lowagie.text.pdf.BaseFont" target="MACROMAN">MACROMAN</site:doc></td><td>MacRomanEncoding</td></tr>
<tr><td colspan="2">You could easily extend the list with "1251" (Cyrillic), "1253" (Greek), "1254" (Turkish)</td></tr>
</table>
You can ask a font for its encodings as is done in the next example:
<site:source class="ListEncodings" />
Note that not all fonts contain all the encodings you want. Just go looking for the font that is best suited for your needs.<br />
These are some examples that use different encodings:
<site:source class="FontEncoding" />
In the next example, we are passing the value <site:doc class="com.lowagie.text.pdf.BaseFont" target="IDENTITY_H">IDENTITY_H</site:doc>
as <i>encoding</i>. BaseFont.IDENTITY_H and BaseFont.IDENTITY_V are not really encodings.
They indicate that the unicode character wil be looked up in the font
and stored as-is, taking two bytes of space. It's the only way to have
Asian fonts and some encodings left out by Adobe such as Thai.
For Europe or the Middle-East, it is better to use an available
encoding that will store a single byte per character.
Fonts with BaseFont.IDENTITY_H or BaseFont.IDENTITY_V
will always be embedded no matter what you enter as third parameter.
<site:source class="UnicodeExample" />
Characters don't have to be single byte as you can see in the next example with double-byte unicode characters:
<site:source class="EncodingFont" /></li>
<li>With the third parameter you specify if you want to embed (a subset of) a font into the PDF document.
This is necessary if you are using special fonts that aren't on the system used by the consumer of your document.</li>
</ol>
</div>
	</site:section>
	
	<site:section name="register">
		<site:sectiontitle>Registering Fonts with FontFactory</site:sectiontitle>
<div>
Instead of creating a <site:doc class="com.lowagie.text.pdf.BaseFont">BaseFont</site:doc>
and wrap it in a <site:doc class="com.lowagie.text.Font">Font</site:doc>,
you could use <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>,
as we said that this is the most uniform way to get your font.
Unfortunately FontFactory doesn't know where your font-files (ttf or other) are stored.
So you have to register the fonts you want to use:
<pre class="commandline">FontFactory.register("c:\\windows\\fonts\\comic.ttf");
FontFactory.register("c:\\windows\\fonts\\msgothic.ttc");</pre>
If you register a font file with 
<site:doc class="com.lowagie.text.FontFactory" target="register(java.lang.String)">register(java.lang.String)</site:doc>,
you can get the font by its name.
You can ask the FontFactory for a list with all the registered fonts with
<site:doc class="com.lowagie.text.FontFactory" target="getRegisteredFonts()">getRegisteredFonts()</site:doc>.
If you want to use fontnames defined by yourself, just register them with an alias
(<site:doc class="com.lowagie.text.FontFactory" target="register(java.lang.String,%20java.lang.String)">register(java.lang.String, java.lang.String)</site:doc>)
and use that alias instead of the actual fontname.
<site:source class="RegisterFont" />
Remark that all methods in class FontFactory are static. So if you have different applications in the same JVM,
you may discover that there were more fonts registered than you expected...<br />
Remember when we said there was a different font for every fontstyle?
It can be quite difficult having to switch to another font everytime
you want to change the style. Sometimes you have to look for the font<i>italic</i>,
sometimes you have to look for the font<i>oblique</i>. If you register all the styles
of the same font family in advance, FontFactory looks up which font corresponds with
which style automatically.
<site:source class="FontFactoryStyles" />
Of course it's still not very userfriendly having to point to the location of the font file on the disk everytime you need a new font.
You could register all the fonts in a directory with
<site:doc class="com.lowagie.text.FontFactory" target="registerDirectory(java.lang.String)">registerDirectory(java.lang.String)</site:doc>.
This way you don't have to look up the exact names of the normal, bold, italic or bolditalic font of a same family.
It gets even easier if you use <site:doc class="com.lowagie.text.FontFactory" target="registerDirectories()">registerDirectories()</site:doc>.
This method looks in some probable directories such as c:\windows\fonts, /usr/X/lib/X11/fonts/TrueType, /usr/X11R6/lib/X11/fonts/ttf, etc...
This works on most Windows, Linux and Solaris systems. (If not, you will have to go and look for the font files yourself.)
In the next example, you can see what fonts are available in the standard directories on my own computer:
<site:source class="UsingFontFactory" />
</div>
	</site:section>
	
	<site:section name="extrastyles">
		<site:sectiontitle>Extra Font Style Characteristics</site:sectiontitle>
<div>
<div class="subtitle">Fonts that don't have the style bold and/or italic</div>
Some font families don't have font definitions to show the font in bold or italic.
In this case, iText can simulate a bold font by changing the way glyphs are
rendered (see <site:tutorial chapter="/objects/chunk">Stroking vs. Filling</site:tutorial>).
Italic can be simulated by <site:tutorial chapter="/objects/chunk">skewing</site:tutorial> chunks.<br /><br />
<div class="subtitle">Width and heigths of glyphs</div>
The width and heights of each glyph are defined in the font file.
If you need to fit some text into a certain area, you may want to know the width and
height of some textstring in advance. You can ask the width from class
<site:tutorial chapter="objects/chunk" section="measure">Chunk</site:tutorial>,
but you can also ask a basefont for its dimensions, using
<site:doc class="com.lowagie.text.pdf.BaseFont" target="getWidthPoint(java.lang.String,%20float)">BaseFont.getWidthPoint(java.lang.String, float)</site:doc>,
<site:doc class="com.lowagie.text.pdf.BaseFont" target="getAscentPoint(java.lang.String,%20float)">BaseFont.getAscentPoint(java.lang.String, float)</site:doc> and
<site:doc class="com.lowagie.text.pdf.BaseFont" target="getDescentPoint(java.lang.String,%20float)">getDescentPoint(java.lang.String, float)</site:doc>
(check the API for some more methods to get widths, ascents and descents).
Text is written on a 'baseline'. The ascent is the maximum height above reached by the glyphs in your text
above this baseline. It is always a positive value. The descent is the maximum depth below the baseline.
It is always a negative value. The height of your text is (ascent - descent).
Just take a look at the example to see how it works:
<site:source class="WidthHeight" />
In some cases you may want full control over the width of each glyph.
No problem, just use <site:doc class="com.lowagie.text.pdf.BaseFont" target="getWidths()">BaseFont.getWidths()</site:doc>,
change the widths and and force the basefont to use these changed widths with <site:doc class="com.lowagie.text.pdf.BaseFont" target="setForceWidthsOutput(boolean)">BaseFont.setForceWidthsOutput(boolean)</site:doc>.
<site:source class="FixedFontWidth" />
<div class="subtitle">Font Style Propagation</div>
There are some rules you should know about 'font propagation'.<br />
When you create a Phrase or a Paragraph  with some content in a certain font (NOT THE DEFAULT FONT) and you add some more content. The fontstyle of the initial object can be propagated if you want to. This is what happens in 'Hello 1!' and 'Hello 2' of the example.
<pre class="commandline">Phrase myPhrase =
  new Phrase("Hello 1! ",
    new Font(Font.TIMES_ROMAN, 8, Font.BOLD));
myPhrase.add(
  new Phrase("some other font ",
    new Font(Font.HELVETICA, 8)));
myPhrase.add(
  new Phrase("This is the end of the sentence.\n",
    new Font(Font.TIMES_ROMAN, 8, Font.ITALIC)));</pre> 
The initial Phrase with the text 'Hello 1!' was bold, some italic text was added, but style bold is propagated, so the style of the printed text is now bold and italic.<br />
If the Font(style) of the initial Phrase is undefined, the font is not propagated:
<pre class="commandline">myPhrase = new Phrase(12);
myPhrase.add(
  new Phrase("Hello 2! ",
    new Font(Font.TIMES_ROMAN, 8, Font.BOLD)));
myPhrase.add(
  new Phrase("This is the end of the sentence.\n",
    new Font(Font.TIMES_ROMAN, 8, Font.ITALIC)));</pre>
As you can see, 'This is the end of the sentence' is italic, but not bold. The font wasn't propagated.
The same applies if you use <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>
to get the Font-object. This is because the FontFactory uses another technique to construct a font.
<pre class="commandline">myPhrase =
  new Phrase("Hello 3! ",
    FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD));
myPhrase.add(
  new Phrase("some other font ",
    FontFactory.getFont(FontFactory.HELVETICA, 8)));
myPhrase.add(
  new Phrase("This is the end of the sentence.\n",
    FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.ITALIC)));</pre>
As mentioned earlier: FontFactory is the safest way to get a Font. It will always give you the font style you are expecting,
regardless of the font style that was used before. Font Propagation can be useful in some cases, but it's a rather quirky feature.
<site:source class="FontStylePropagation"/>
<div class="subtitle">Underline and strike through</div>
Allthough underlining and striking through text isn't really font-related,
both 'style-types' are added to the <site:doc class="com.lowagie.text.Font">Font</site:doc>-class:
<site:doc class="com.lowagie.text.Font" target="UNDERLINE">Font.UNDERLINE</site:doc> and
<site:doc class="com.lowagie.text.Font" target="STRIKETHRU">Font.STRIKETHRU</site:doc>.
In the example, we generate PDF, RTF and HTML. If however, you only need to generate PDF,
it is much better to use <site:tutorial chapter="/objects/chunk" section="underline">Chunk-functionality</site:tutorial>.
Font.UNDERLINE and Font.STRIKETHRU use some default values of this functionality.
If you want complete control over the height, width, color,... of the line,
you should use the method <site:doc class="com.lowagie.text.Chunk" target="setUnderline(java.awt.Color,%20float,%20float,%20float,%20float,%20int)">Chunk.setUnderline</site:doc>
as described in the chapter on <site:tutorial chapter="/objects/chunk" section="underline">Chunks</site:tutorial>.
<site:source class="ExtraStyles" />
<div class="subtitle">Font Color</div>
If you want to change the font color, just ask the
<site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>
for another font with the color of your choice:
<pre class="commandline">font red =
  FontFactory.getFont(
    FontFactory.COURIER,
    Font.DEFAULTSIZE,
    Font.NORMAL,
    new Color(0xFF, 0x00, 0x00));</pre>
It's a little more complicated if you want to change the color of some
text you want to add at an <site:tutorial chapter="" section="part3">absolute position</site:tutorial>.
As you can read in <site:tutorial chapter="" section="part3">that specific chapter</site:tutorial>,
you have to use class <site:doc class="com.lowagie.text.pdf.BaseFont">BaseFont</site:doc>
and this class doesn't have a color value. In this case, you have to know that, according to
the PDF specs, characters are seen as 'shapes'. Those shapes are filled with a certain color.
So if you want to change the color of the font, you need to change the color with the 'ColorFill'
of your choice in <site:doc class="com.lowagie.text.pdf.PdfContentByte">PdfContentByte</site:doc>:
<pre class="commandline">BaseFont bf =
  FontFactory.getFont(FontFactory.COURIER).getCalculatedBaseFont();
cb.beginText();
cb.setRGBColorFill(new Color(0x00, 0x00, 0xFF));
cb.setFontAndSize(bf, 12);
cb.showTextAligned(PdfContentByte.ALIGN_CENTER, text + "This text is centered", 250, 700, 0);
cb.endText();</pre>
<site:source class="FontColor" />
</div>
	</site:section>
	
	<site:section name="more">
		<site:sectiontitle>More Font types</site:sectiontitle>
<div>
If you read this chapter looking for Chinese, Japanese, Korean, Arabic, Hebrew,... fonts,
sorry: wrong chapter. Just go to the chapter on <site:tutorial chapter="/directcontent/fonts">font types</site:tutorial>
and you'll probably find what you're looking for.
</div>
	</site:section>
	
	</site:chapter>

</site:page>