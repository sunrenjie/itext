<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title>Fonts in iText</site:title>
		<site:summary>Different types of Fonts supported in iText.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, Fonts, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:book asin="0201570440">Adobe type 1 font format</site:book>
			<site:keyword>Fonts</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="StandardType1Fonts" standalone="yes" />
			<site:result>StandardType1Fonts.pdf</site:result>
			<site:description>Sums up the 14 Standard Type 1 Fonts</site:description>
		</site:example>
		<site:example>
			<site:java src="FontFactoryType1Fonts" standalone="yes" />
			<site:result>FontFactoryType1Fonts.pdf</site:result>
			<site:description>Sums up the 14 Standard Type 1 Fonts (using the FontFactory)</site:description>
		</site:example>
		<site:example>
			<site:java src="FontStylePropagation" standalone="yes" />
			<site:result>FontStylePropagation.pdf</site:result>
			<site:description>Explains the mechanism of Font Style Propagation</site:description>
		</site:example>
		<site:example>
			<site:java src="ExtraStyles" standalone="yes" />
			<site:result>ExtraStyles.pdf</site:result>
			<site:result>ExtraStyles.rtf</site:result>
			<site:result>ExtraStyles.html</site:result>
			<site:description>Demonstrates how to underline or strike through text</site:description>
		</site:example>
		<site:example>
			<site:java src="FontColor" standalone="yes" />
			<site:result>FontColor.pdf</site:result>
			<site:description>Shows how to change the color of a font</site:description>
		</site:example>
		<site:example>
			<site:java src="FontEncoding" standalone="yes" />
			<site:result>fontencoding.pdf</site:result>
			<site:description>Using an encoding</site:description>
		</site:example>
		<site:example>
			<site:java src="TrueType" standalone="yes" />
			<site:result>truetype.pdf</site:result>
			<site:description>Using a True Type font</site:description>
		</site:example>
		<site:example>
			<site:java src="EmbeddedTrueType" standalone="yes" />
			<site:result>embeddedtruetype.pdf</site:result>
			<site:description>Using an embedded True Type font</site:description>
		</site:example>
		<site:example>
			<site:java src="UsingFontFactory" standalone="yes" />
			<site:result>FontFactory.pdf</site:result>
			<site:description>Sums up the Fonts that are available in some standard font directories on your system</site:description>
		</site:example>
		<site:example>
			<site:java src="ComplexText" standalone="yes" />
			<site:result>complextext.pdf</site:result>
			<site:description>Adding text at absolute positions</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	<site:section name="type1">
		<site:sectiontitle>Standard Type 1 Fonts</site:sectiontitle>
<div>
PDF prescribes a set of 14 standard fonts that can be used without prior definition.
These include four faces each of three Latin text typefaces (Courier,
Helvetica and Times), as well as two symbolic fonts (Symbol and ITC Zapf
Dingbats &#174;). These fonts, or suitable substitute fonts with the same metrics, are
considered to be available in all PDF consumer applications. You don't have to
embed them in your PDF document.<br />
These 'Base14 Fonts' were historically the first fonts supported in iText.
If you take a look inside the iText jar, you find an AFM file
for each of these fonts in directory <span class="commandline">com/lowagie/text/pdf/fonts</span>.
AFM is Adobe's ASCII-based file format used for storing font metric data as
human-readable data. iText reads these files to retrieve information on the width,
the kerning and other metrics of each character (or, to use the correct term:
of each 'glyph').
<table>
<tr><th>Font</th><th>AFM file</th></tr>
<tr><td>Courier</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Courier.afm">Courier.afm</a></td></tr>
<tr><td>Courier Bold</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Courier-Bold.afm">Courier-Bold.afm</a></td></tr>
<tr><td>Courier Italic (Oblique)</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Courier-Oblique.afm">Courier-Oblique.afm</a></td></tr>
<tr><td>Courier Bold and Italic</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Courier-BoldOblique.afm">Courier-BoldOblique.afm</a></td></tr>
<tr><td>Helvetica</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica.afm</a></td></tr>
<tr><td>Helvetica Bold</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica-Bold.afm</a></td></tr>
<tr><td>Helvetica Italic (Oblique)</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica-Oblique.afm</a></td></tr>
<tr><td>Helvetica Bold and Italic</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica-BoldOblique.afm</a></td></tr>
<tr><td>Times Roman</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Times-Roman.afm">Times-Roman.afm</a></td></tr>
<tr><td>Times Roman Bold</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Times-Bold.afm">Times-Bold.afm</a></td></tr>
<tr><td>Times Roman Italic</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Times-Italic.afm">Times-Italic.afm</a></td></tr>
<tr><td>Times Roman Bold and Italic</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Times-BoldItalic.afm">Times-BoldItalic.afm</a></td></tr>
<tr><td>Symbol</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/Symbol.afm">Symbol.afm</a></td></tr>
<tr><td>ZapfDingBats&#174;</td><td><a href="http://itext.sourceforge.net/src/com/lowagie/text/pdf/fonts/ZapfDingbats.afm">ZapfDingbats.afm</a></td></tr>
</table>
As you can see the different faces (normal, bold, italic and bolditalic) of the same type face (Courier, Helvetica, Times Roman)
are considered to be different fonts. This is an issue that shall recur further on in this chapter
(so please keep it in mind). iText tries to make these differences more transparant, by asking you
for the font 'family' (Courier, Helvetica, Times Roman) and the font style (normal, bold, italic).<br />
You can construct a Base 14 <site:doc class="com.lowagie.text.Font">Font</site:doc>-object with one
of the simple <site:doc class="com.lowagie.text.Font" target="constructor_summary">constructors</site:doc>
as is done in the next example:
<pre class="commandline">fonts[0] =
	new Font(Font.COURIER, Font.DEFAULTSIZE, Font.NORMAL);
fonts[2] =
	new Font(Font.COURIER, Font.DEFAULTSIZE, Font.BOLD);
fonts[3] =
	new Font(Font.COURIER, Font.DEFAULTSIZE, Font.BOLD | Font.ITALIC);
fonts[7] =
	new Font(Font.HELVETICA, Font.DEFAULTSIZE, Font.BOLDITALIC);
fonts[9] =
	new Font(Font.TIMES_ROMAN, Font.DEFAULTSIZE, Font.ITALIC);</pre>
<site:source class="StandardType1Fonts" />
But there are other (and better) ways to do this:
in the next example, we use the class <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>,
as this is the safest and most uniform way to get a new <site:doc class="com.lowagie.text.Font">Font</site:doc>-object
(unless you want to use the mechanism of <site:tutorial chapter="/objects/fonts" section="extrastyles">Font Propagation</site:tutorial>).
Further on in this chapter, we will see that class <site:doc class="com.lowagie.text.Font">Font</site:doc> is in many
cases just a wrapper class for the more complex class <site:doc class="com.lowagie.text.pdf.BaseFont">BaseFont</site:doc>.
<pre class="commandline">fonts[0] =
	FontFactory.getFont(
		FontFactory.COURIER,
		Font.DEFAULTSIZE,
		Font.NORMAL);
fonts[2] =
	FontFactory.getFont(
		FontFactory.COURIER,
		Font.DEFAULTSIZE,
		Font.BOLD);
fonts[3] =
	FontFactory.getFont(
		FontFactory.COURIER,
		Font.DEFAULTSIZE,
		Font.BOLD | Font.ITALIC);
fonts[7] =
	FontFactory.getFont(
		FontFactory.HELVETICA,
		Font.DEFAULTSIZE,
		Font.BOLDITALIC);
fonts[9] =
	FontFactory.getFont(
		FontFactory.TIMES_ROMAN,
		Font.DEFAULTSIZE,
		Font.ITALIC);</pre>
<site:source class="FontFactoryType1Fonts" />
</div>
	</site:section>
	
	<site:section name="extrastyles">
		<site:sectiontitle>Extra Font Style Characteristics</site:sectiontitle>
<div>
<div class="subtitle">Font Style Propagation</div>
There are some rules you should know about 'font propagation'.<br />
When you create a Phrase or a Paragraph  with some content in a certain font (NOT THE DEFAULT FONT) and you add some more content. The fontstyle of the initial object can be propagated if you want to. This is what happens in 'Hello 1!' and 'Hello 2' of the example.
<pre class="commandline">Phrase myPhrase =
	new Phrase("Hello 1! ",
		new Font(Font.TIMES_ROMAN, 8, Font.BOLD));
myPhrase.add(
	new Phrase("some other font ",
		new Font(Font.HELVETICA, 8)));
myPhrase.add(
	new Phrase("This is the end of the sentence.\n",
		new Font(Font.TIMES_ROMAN, 8, Font.ITALIC)));</pre> 
The initial Phrase with the text 'Hello 1!' was bold, some italic text was added, but style bold is propagated, so the style of the printed text is now bold and italic.<br />
If the Font(style) of the initial Phrase is undefined, the font is not propagated:
<pre class="commandline">myPhrase = new Phrase(12);
myPhrase.add(
	new Phrase("Hello 2! ",
		new Font(Font.TIMES_ROMAN, 8, Font.BOLD)));
myPhrase.add(
	new Phrase("This is the end of the sentence.\n",
		new Font(Font.TIMES_ROMAN, 8, Font.ITALIC)));</pre>
As you can see, 'This is the end of the sentence' is italic, but not bold. The font wasn't propagated.
The same applies if you use <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>
to get the Font-object. This is because the FontFactory uses another technique to construct a font.
<pre class="commandline">myPhrase =
	new Phrase("Hello 3! ",
		FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.BOLD));
myPhrase.add(
	new Phrase("some other font ",
		FontFactory.getFont(FontFactory.HELVETICA, 8)));
myPhrase.add(
	new Phrase("This is the end of the sentence.\n",
		FontFactory.getFont(FontFactory.TIMES_ROMAN, 8, Font.ITALIC)));</pre>
As mentioned earlier: FontFactory is the safest way to get a Font. It will always give you the font style you are expecting,
regardless of the font style that was used before. Font Propagation can be useful in some cases, but it's a rather quirky feature.
<site:source class="FontStylePropagation"/>
<div class="subtitle">Underline and strike through</div>
Allthough underlining and striking through text isn't really font-related,
both 'style-types' are added to the <site:doc class="com.lowagie.text.Font">Font</site:doc>-class:
<site:doc class="com.lowagie.text.Font" target="UNDERLINE">Font.UNDERLINE</site:doc> and
<site:doc class="com.lowagie.text.Font" target="STRIKETHRU">Font.STRIKETHRU</site:doc>.
In the example, we generate PDF, RTF and HTML. If however, you only need to generate PDF,
it is much better to use <site:tutorial chapter="/objects/chunk" section="underline">Chunk-functionality</site:tutorial>.
Font.UNDERLINE and Font.STRIKETHRU use some default values of this functionality.
If you want complete control over the height, width, color,... of the line,
you should use the method <site:doc class="com.lowagie.text.Chunk" target="setUnderline(java.awt.Color,%20float,%20float,%20float,%20float,%20int)">Chunk.setUnderline</site:doc>
as described in the chapter on <site:tutorial chapter="/objects/chunk" section="underline">Chunks</site:tutorial>.
<site:source class="ExtraStyles" />
<div class="subtitle">Font Color</div>
If you want to change the font color, just ask the
<site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>
for another font with the color of your choice:
<pre class="commandline">font red =
	FontFactory.getFont(
		FontFactory.COURIER,
		Font.DEFAULTSIZE,
		Font.NORMAL,
		new Color(0xFF, 0x00, 0x00));</pre>
It's a little more complicated if you want to change the color of some
text you want to add at an <site:tutorial chapter="" section="part3">absolute position</site:tutorial>.
As you can read in <site:tutorial chapter="" section="part3">that specific chapter</site:tutorial>,
you have to use class <site:doc class="com.lowagie.text.pdf.BaseFont">BaseFont</site:doc>
and this class doesn't have a color value. In this case, you have to know that, according to
the PDF specs, characters are seen as 'shapes'. Those shapes are filled with a certain color.
So if you want to change the color of the font, you need to change the color with the 'ColorFill'
of your choice in <site:doc class="com.lowagie.text.pdf.PdfContentByte">PdfContentByte</site:doc>:
<pre class="commandline">BaseFont bf =
	FontFactory.getFont(FontFactory.COURIER).getCalculatedBaseFont();
cb.beginText();
cb.setRGBColorFill(new Color(0x00, 0x00, 0xFF));
cb.setFontAndSize(bf, 12);
cb.showTextAligned(PdfContentByte.ALIGN_CENTER, text + "This text is centered", 250, 700, 0);
cb.endText();</pre>
<site:source class="FontColor" />
</div>
	</site:section>
	
	</site:chapter>

</site:page>