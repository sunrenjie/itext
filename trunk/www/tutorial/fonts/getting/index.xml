<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Getting fonts</site:title>
		<site:summary>Overview of the different types of fonts supported by iText.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, PdfContentByte, Graphics, absolute positions, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:book asin="0201570440">Adobe type 1 font format</site:book>
			<site:keyword>Fonts</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="TrueType" standalone="yes" />
			<site:result>truetype.pdf</site:result>
			<site:description>Using a True Type font</site:description>
		</site:example>
		<site:example>
			<site:java src="RegisterFont" standalone="yes" />
			<site:result>registerfont.pdf</site:result>
			<site:result>registered.txt</site:result>
			<site:description>Registering Fonts with the FontFactory</site:description>
		</site:example>
		<site:example>
			<site:java src="FontFactoryStyles" standalone="yes" />
			<site:result>fontfactorystyles.pdf</site:result>
			<site:description>Changing the style of a fontfactory font</site:description>
		</site:example>
		<site:example>
			<site:java src="UsingFontFactory" standalone="yes" />
			<site:result>FontFactory.pdf</site:result>
			<site:description>Sums up the Fonts that are available in some standard font directories on your system</site:description>
		</site:example>
		<site:example>
			<site:java src="TrueTypeCollections" standalone="yes" />
			<site:result>truetypecollections.pdf</site:result>
			<site:result>msgothic.txt</site:result>
			<site:description>True Type Collections</site:description>
		</site:example>
		<site:example>
			<site:java src="OpenTypeFont" standalone="yes" />
			<site:result>opentypefont.pdf</site:result>
			<site:externalresource>liz.otf</site:externalresource>
			<site:description>Using an Open Type Font with Compact Font Format (CFF) data only (no true type outlines)</site:description>
		</site:example>
		<site:example>
			<site:java src="ChineseJapaneseKorean" standalone="yes" />
			<site:result>cjk.pdf</site:result>
			<site:extrajar>iTextAsian.jar</site:extrajar>
			<site:description>Using CJK Fonts</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
		
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="8" />
			<site:bookchapter chapter="9" />
		</site:book>
		</div>
	</site:section>
	<site:section name="standard">
		<site:sectiontitle>Fonts supported in iText</site:sectiontitle>
<div>
The first part of Chapter 5 of the PDF Reference Manual deals with
<site:tutorial chapter="/directcontent/text">Text State</site:tutorial>;
the second part (starting with section 5.4) tells you all about fonts.
If you want to know more about how to use a Font object with iText,
please read the chapter on
<site:tutorial chapter="/fonts">Font objects</site:tutorial> first.
This chapter will tell you where to find the font you need.
</div>
	</site:section>
	<site:section name="builtin">
		<site:sectiontitle>Built-in fonts</site:sectiontitle>
<div>
PDF prescribes a set of 14 standard fonts that can be used without prior definition.
These include four faces each of three Latin text typefaces (Courier,
Helvetica and Times), as well as two symbolic fonts (Symbol and ITC Zapf
Dingbats &#174;). These fonts, or suitable substitute fonts with the same metrics, are
considered to be available in all PDF consumer applications. You don't have to
embed them in your PDF document.<br />
These 'Base14 Fonts' were historically the first fonts supported in iText.
If you take a look inside the iText jar, you find an AFM file
for each of these fonts in directory <span class="commandline">com/lowagie/text/pdf/fonts</span>.
AFM is Adobe's ASCII-based file format used for storing font metric data as
human-readable data. iText reads these files to retrieve information on the width,
the kerning and other metrics of each character (or, to use the correct term:
of each 'glyph').
<table>
<tr><th>Font</th><th>AFM file</th></tr>
<tr><td>Courier</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Courier.afm">Courier.afm</a></td></tr>
<tr><td>Courier Bold</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Courier-Bold.afm">Courier-Bold.afm</a></td></tr>
<tr><td>Courier Italic (Oblique)</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Courier-Oblique.afm">Courier-Oblique.afm</a></td></tr>
<tr><td>Courier Bold and Italic</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Courier-BoldOblique.afm">Courier-BoldOblique.afm</a></td></tr>
<tr><td>Helvetica</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica.afm</a></td></tr>
<tr><td>Helvetica Bold</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica-Bold.afm</a></td></tr>
<tr><td>Helvetica Italic (Oblique)</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica-Oblique.afm</a></td></tr>
<tr><td>Helvetica Bold and Italic</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Helvetica.afm">Helvetica-BoldOblique.afm</a></td></tr>
<tr><td>Times Roman</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Times-Roman.afm">Times-Roman.afm</a></td></tr>
<tr><td>Times Roman Bold</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Times-Bold.afm">Times-Bold.afm</a></td></tr>
<tr><td>Times Roman Italic</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Times-Italic.afm">Times-Italic.afm</a></td></tr>
<tr><td>Times Roman Bold and Italic</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Times-BoldItalic.afm">Times-BoldItalic.afm</a></td></tr>
<tr><td>Symbol</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/Symbol.afm">Symbol.afm</a></td></tr>
<tr><td>ZapfDingBats&#174;</td><td><a href="http://itextdocs.lowagie.com/src/com/lowagie/text/pdf/fonts/ZapfDingbats.afm">ZapfDingbats.afm</a></td></tr>
</table>
As you can see the different faces (normal, bold, italic and bolditalic) of the same type face (Courier, Helvetica, Times Roman)
are considered to be different fonts.
</div>
	</site:section>
	<site:section name="files">
		<site:sectiontitle>Fonts from files</site:sectiontitle>
<div>
<div class="subtitle">TTF Files (True Type Fonts)</div>
The <i>True Type</i> font format was developed by Apple Computer, Inc., 
and has been adopted as a standard font format for the MicroSoft Windows operating system.
You will find lots of TTF files in the directory 'C:/WINDOWS/FONTS'.
These font files can be read by iText. It doesn't matter on which operating system you are working:
you can use a ttf-file on LINUX as well as on Apple computers as long as you don't violate any
copyrights that may rest on the font (in which case iText will throw an exception).
<site:source class="TrueType" />

<div class="subtitle">Registering font files</div>
Instead of creating a <site:doc class="com.lowagie.text.pdf.BaseFont">BaseFont</site:doc>
and wrap it in a <site:doc class="com.lowagie.text.Font">Font</site:doc>,
you could use <site:doc class="com.lowagie.text.FontFactory">FontFactory</site:doc>,
which is the most uniform way to get your font.
Unfortunately FontFactory doesn't know where your font-files (ttf or other) are stored.
So you have to register the fonts you want to use:
<pre class="commandline">FontFactory.register("c:\\windows\\fonts\\comic.ttf");
FontFactory.register("c:\\windows\\fonts\\msgothic.ttc");</pre>
If you register a font file with 
<site:doc class="com.lowagie.text.FontFactory" target="register(java.lang.String)">register(java.lang.String)</site:doc>,
you can get the font by its name.
You can ask the FontFactory for a list with all the registered fonts with
<site:doc class="com.lowagie.text.FontFactory" target="getRegisteredFonts()">getRegisteredFonts()</site:doc>.
If you want to use fontnames defined by yourself, just register them with an alias
(<site:doc class="com.lowagie.text.FontFactory" target="register(java.lang.String,%20java.lang.String)">register(java.lang.String, java.lang.String)</site:doc>)
and use that alias instead of the actual fontname.
<site:source class="RegisterFont" />
Note that all methods in class FontFactory are static. So if you have different applications in the same JVM,
you may discover that there were more fonts registered than you expected...<br />
Remember when we said there was a different font for every fontstyle?
It can be quite difficult having to switch to another font everytime
you want to change the style. Sometimes you have to look for the font<i>italic</i>,
sometimes you have to look for the font<i>oblique</i>. If you register all the styles
of the same font family in advance, FontFactory looks up which font corresponds with
which style automatically.
<site:source class="FontFactoryStyles" />
Of course it's still not very userfriendly having to point to the location of the font file on the disk everytime you need a new font.
You could register all the fonts in a directory with
<site:doc class="com.lowagie.text.FontFactory" target="registerDirectory(java.lang.String)">registerDirectory(java.lang.String)</site:doc>.
This way you don't have to look up the exact names of the normal, bold, italic or bolditalic font of a same family.
It gets even easier if you use <site:doc class="com.lowagie.text.FontFactory" target="registerDirectories()">registerDirectories()</site:doc>.
This method looks in some probable directories such as c:\windows\fonts, /usr/X/lib/X11/fonts/TrueType, /usr/X11R6/lib/X11/fonts/ttf, etc...
This works on most Windows, Linux and Solaris systems. (If not, you will have to go and look for the font files yourself.)
In the next example, you can see what fonts are available in the standard directories on my own computer:
<site:source class="UsingFontFactory" />

<div class="subtitle">TTC Files (True Type Collections)</div>
A <i>True Type Collection</i> contains more than one font. As you can see in the example,
we add a number after the TTC-file to indicate which of the fonts we want to use.
If you want to know the names of the fonts in a certain TTC-file, you can use the
method <site:doc class="com.lowagie.text.pdf.BaseFont" target="enumerateTTCNames(java.lang.String)">enumerateTTCNames(java.lang.String)</site:doc>.
The file msgothic.ttc contains 3 fonts: (0) MS-Gothic, (1) MS-PGothic and (2) MS-UIGothic.
In the example, we want to use MS-PGothic, so we add 1 to the path:
<pre class="commandline">BaseFont.createFont(
  "c:\\windows\\fonts\\msgothic.ttc,1",
  BaseFont.IDENTITY_H,
  BaseFont.EMBEDDED);</pre>
Note that this example will not run on your system if you don't have msgothic.ttc in your fonts directory.
It's not there by default! If you want to run this example, you should look on your WINDOWS installation CDs
and extract it to your fonts directory.
<site:source class="TrueTypeCollections" />

<div class="subtitle">OTF Files (Open Type Fonts)</div>
OpenType is a cross-platform font format developed jointly by Microsoft and Adobe.
It simplifies font management, adds new typographic capabilities, and improves multilingual support.
Both Microsoft and Adobe have announced that OpenType will replace their respective TrueType and Type 1 font formats,
and Adobe has already converted the entire Adobe Type Library into this format.
<site:source class="OpenTypeFont" />

<div class="subtitle">AFM Files (Adobe Font Metrics)</div>
If you have other .AFM and .PFB files than the afm files of Base14 fonts
that are in the iText.jar,, you can put them in the same directory (com/lowagie/text/pdf/fonts)
and then use something like this:
<pre class="commandline">BaseBont bf = BaseFont.createFont("myfont.afm", BaseFont.WINANSI, BaseFont.EMBEDDED);</pre>
However, if you have the alternative, use a true type font: the font will be subset and the resulting document will be a lot smaller.


</div>
	</site:section>
	<site:section name="jars">
		<site:sectiontitle>Fonts from jars (and font packs)</site:sectiontitle>
<div>
CID fonts are Postscript-based fonts which can support a large number
of characters (65,536 max). The format is often used for CJK fonts
(CJK = Chinese Japanese Korean). CID format makes it possible to change
the character order (encoding) of a font through the use of character-to-glyph tables (CMaps)
which are external to the font.<br />
If you want to use CJK fonts in iText, you need an extra jar:
<a href="http://itextdocs.lowagie.com/downloads/iTextAsian.jar">iTextAsian.jar</a>.
If you want to be able to read the text you generated with iText using CJK fonts,
you will also need to download and install a special
<a href="http://www.adobe.com/products/acrobat/acrrasianfontpack.html">font pack for Acrobat Reader</a>
(or maybe your Reader will ask you to install such a font pack upon opening a PDF file with CJK fonts).
For the rest, creating a CJK font supported by the iTextAsian.jar is as easy as using any other font:
<pre class="commandline">BaseFont bfChinese = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H", BaseFont.NOT_EMBEDDED);
Font FontChinese = new Font(bfChinese, 12, Font.NORMAL);
Paragraph p = new Paragraph(chinese, FontChinese);
document.add(p);</pre>
Skip to the <site:tutorial chapter="/fonts/styles" section="direction">direction</site:tutorial>-section if you want to know how to write vertical text!
<site:source class="ChineseJapaneseKorean" />
This is the list of fonts supported in the iTextAsian.jar:
<ul>
<li><b>Chinese Simplified:</b><br />
STSong-Light and STSongStd-Light with the encodings UniGB-UCS2-H and UniGB-UCS2-V</li>
<li><b>Chinese Traditional:</b><br />
MHei-Medium, MSung-Light and MSungStd-Light with the encodings UniCNS-UCS2-H and UniCNS-UCS2-V</li>
<li><b>Japanese:</b><br />
HeiseiMin-W3, HeiseiKakuGo-W5 and KozMinPro-Regular with the encodings UniJIS-UCS2-H, UniJIS-UCS2-V, UniJIS-UCS2-HW-H and UniJIS-UCS2-HW-V</li>
<li><b>Korean:</b><br />
HYGoThic-Medium, HYSMyeongJo-Medium and HYSMyeongJoStd with the encodings UniKS-UCS2-H and UniKS-UCS2-V</li>
</ul><br /><br />
<div class="subtitle">CID fonts</div>
But that's not all, there is also an extra jar
<a href="http://itextdocs.lowagie.com/downloads/iTextAsianCmaps.jar">iTextAsianCmaps.jar</a>.
It contains the cmaps for lots of other CID fonts. This is how you can use them:
<pre class="commandline">PdfEncodings.loadCmap(
  "GBK2K-H",
  PdfEncodings.CRLF_CID_NEWLINE); // needs to be done only once
byte text[] = my_GB_encoded_text;
String cid = PdfEncodings.convertCmap("GBK2K-H", text);
BaseFont bf = BaseFont.createFont("STSong-Light", "Identity-H", false);
Paragraph p = new Paragraph(cid, new Font(bf, 14));
document .add(p);</pre>
</div>
	</site:section>
	</site:chapter>

</site:page>