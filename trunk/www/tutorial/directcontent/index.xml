<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Direct Content</site:title>
		<site:summary>Add content directly to the PDF file using the PdfContentByte class.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, PdfContentByte, Graphics, absolute positions, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>PDF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="Layers" standalone="yes" />
			<site:result>layers.pdf</site:result>
			<site:externalresource>hitchcock.png</site:externalresource>
			<site:description>Explains the concept of PdfContentByte layers in iText</site:description>
		</site:example>
		<site:example>
			<site:java src="Templates" standalone="yes" />
			<site:result>templates.pdf</site:result>
			<site:description>Using templates</site:description>
		</site:example>
		<site:example>
			<site:java src="TemplateImages" standalone="yes" />
			<site:result>templateImages.pdf</site:result>
			<site:description>Templates used as image</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="10" />
			<site:bookchapter chapter="11" />
			<site:bookchapter chapter="12" />
		</site:book>
		</div>
	</site:section>
	<site:section name="pdfsyntax">
		<site:sectiontitle>PDF Syntax</site:sectiontitle>
<div>
You can really do a lot of great things with the high-level objects iText offers you,
but if you really want to make use of the full power of PDF, you need to know more
about PDF syntax.
Maybe you should read chapter 4 (Graphics) and chapter 5 (Text)
of the PDF Reference Manual (version 1.6) first. They will give you
a good insight about the different operators and operands we are going
to use in the next chapters. In this tutorial chapter, I will do an
attempt to summarize some of the most important concepts.<br />
But let's start by quoting what is on page 163 of the Reference Manual:
<blockquote>
The graphics operators form six main groups.<br />
<ul>
<li><i>Graphics state operators</i> manipulate the data structure called
the <i>graphics state</i>, the global framework within which the other
graphics operators execute. The graphics state includes the <i>current
transformation matrix</i> (CTM), which maps user space coordinates used
within a PDF content stream into output device coordinates. It also
includes the <i>current color</i>, the <i>current clipping path</i>,
and many other parameters that are implicit operands of the painting
operators.<br />
<div class="small">For more info on how iText deals with this, see:
<ul>
<li><site:tutorial chapter="/directcontent/coordinates">PDF coordinate system</site:tutorial></li>
<li><site:tutorial chapter="/directcontent/graphics" section="state">Graphics State</site:tutorial></li>
<li><site:tutorial chapter="/directcontent/colors">Colors</site:tutorial></li>
</ul></div>
</li>
<li><i>Path construction operators</i> specify <i>paths</i>, which
define shapes, linie trajectories, and regions of various sorts.
They include operators for beginning a new path, adding line segments
and curves to it, and closing it.<br />
<div class="small">For more info on how iText deals with this, see:<ul><li>
<site:tutorial chapter="/directcontent/graphics" section="paths">Path construction and painting</site:tutorial></li></ul></div></li>
<li><i>Path painting operators</i> fill a path with a color, paint a stroke
along it, or use it as a clipping boundary.
<div class="small">For more info on how iText deals with this, see:<ul><li>
<site:tutorial chapter="/directcontent/graphics" section="paths">Path construction and painting</site:tutorial></li></ul></div></li>
<li><i>Other painting operators</i> paint certain self-describing graphics
objects. These include sampled images, geometrically defined shadings, and
entire content streams that in turn contain sequences of graphics operators.
<div class="small">For more info on how iText deals with this, see:
<ul>
<li><site:tutorial chapter="/objects/images">Image XObjects</site:tutorial></li>
<li><site:tutorial chapter="/directcontent" section="templates">Form XObjects</site:tutorial></li>
<li><site:tutorial chapter="/directcontent" section="postscript">PostScript XObjects</site:tutorial></li>
</ul></div></li>
<li><i>Text operators</i> select and show <i>character glyphs</i> from
<i>fonts</i> (descriptions of typefaces for representing text characters).
Because PDF treats glyphs as general graphical shapes, many of the text
operators could be grouped with the graphics state or painting operators. (...)<br />
<div class="small">For more info on how iText deals with this, see:
<ul>
<li><site:tutorial chapter="/directcontent/text">Text</site:tutorial></li>
<li><site:tutorial chapter="/fonts">Fonts</site:tutorial></li>
</ul></div></li>
<li><i>Marked-content operators</i> associate higher-level logical information
with objects in the content stream. This information does not affect the rendered
appearance of the content (...).<br />
<div class="small">For more info on how iText deals with this, see:<ul><li>
<site:tutorial chapter="/directcontent/optionalcontent">Optional Content</site:tutorial></li></ul></div></li>
</ul>
</blockquote>
</div>
	</site:section>
	
	
	<site:section name="pdfcontentbyte">
		<site:sectiontitle>iText approach</site:sectiontitle>
<div>
When using high-level objects in iText, you add text and images, chapters and sections, paragraphs and chunks,...
without bothering about layout. iText takes care of dividing the text into pages and positioning every word,
sentence, paragraph on a page. But sometimes we don't want this automatic formatting. Sometimes we want to put
some graphic or some text at some exact position on a page.
The key class to achieve this, is <site:doc class="com.lowagie.text.pdf.PdfContentByte">com.lowagie.text.pdf.PdfContentByte</site:doc>.<br />
Each page in an iText PDF file, is built using 4 different layers.
Two of them (the middle ones) are stored in class <site:doc class="com.lowagie.text.pdf.PdfDocument">PdfDocument</site:doc>.
You don't have access to them. They are to be used by high-level objects only.
The upper one, called 'text' is used for text, the lower one, called graphics, for all other content.
For instance: the contents of a Chunk are added to the 'text' layer, but if the Chunk contains an Image,
it is added to the 'graphics' layer. This way, an image never covers up text.<br />
Then there's the other two layers, stored in class <site:doc class="com.lowagie.text.pdf.PdfWriter">PdfWriter</site:doc>.
You can get them with the methods
<site:doc class="com.lowagie.text.pdf.PdfWriter" target="getDirectContent()">getDirectContent()</site:doc> and
<site:doc class="com.lowagie.text.pdf.PdfWriter" target="getDirectContentUnder()">getDirectContentUnder()</site:doc>.
There is only one PdfContentByte-object representing the 'Direct Content' and one PdfContentByte-object
representing the 'Direct Content Under'. Multiple calls to these methods will allways retrieve the same
corresponding PdfContentByte.<br />
<site:image source="layers.gif">PdfContentByte layers</site:image><br />
You can cover content added with high-level objects by writing content to the 'Direct Content' PdfContentByte.
You can add content under the high-level objects (for instance a Watermark) by adding content to the 'Direct Content Under' PdfContentByte.
This is illustrated in the following example:
<site:source class="Layers" />
Summarized: when a page is finished, 4 layers are drawn on top of eachother in this order:
<ol>
<li>the PdfContentByte you can retrieve and with the method <site:doc class="com.lowagie.text.pdf.PdfWriter" target="getDirectContentUnder()">getDirectContentUnder()</site:doc></li>
<li>the internal PdfContentByte-object that contains the graphics of high level objects</li>
<li>the internal PdfContentByte-object that contains the text of high level objects</li>
<li>the PdfContentByte you can retrieve and with the method <site:doc class="com.lowagie.text.pdf.PdfWriter" target="getDirectContent()">getDirectContent()</site:doc></li>
</ol>
Remark: this is iText specific stuff, do not confuse this tutorial section with the section on
the <site:tutorial chapter="/directcontent/optionalcontent">Optional Content</site:tutorial> layers.
</div>
	</site:section>
	<site:section name="templates">
		<site:sectiontitle>Using templates (Form XObjects)</site:sectiontitle>
<div>
The 4 iText layers (direct content, high level text, high level graphics and direct content under)
are written to a PDF stream of a page. However, there is a possibility to get a layer, a canvas, a <i>PdfTemplate</i>
that can be external to the PDF page stream. It will be treated as an <i>external object</i>.<br />
There are 3 types of external objects in PDF:
<ol>
<li><site:tutorial chapter="/objects/images">Image XObjects</site:tutorial></li>
<li><site:tutorial chapter="/directcontent" section="templates">Form XObjects</site:tutorial></li>
<li><site:tutorial chapter="/directcontent" section="postscript">PostScript XObjects</site:tutorial></li>
</ol>
In iText, you can use a <i>Form XObject</i> by creating a <site:doc class="com.lowagie.text.pdf.PdfTemplate">PdfTemplate</site:doc>.
<site:doc class="com.lowagie.text.pdf.PdfTemplate">PdfTemplate</site:doc>.
This is done with the method <site:doc class="com.lowagie.text.pdf.PdfContentByte" target="createTemplate(float,%20float)">PdfContentByte.createTemplate(float, float)</site:doc>
(the parameters specify the width and height). You can add a template with on of the
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="addTemplate(com.lowagie.text.pdf.PdfTemplate,%20float,%20float)">PdfContentByte.addTemplate</site:doc> methods.
But you should read more about the <site:tutorial chapter="/directcontent/coordinates" section="templates">Transformation Matrix</site:tutorial> first if you want to know what the parameters of these methods represent.<br />
<site:source class="Templates" />
If all those transformation parameters are too complex to understand, you might want to wrap a PdfTemplate in an Image object
(class Image has methods that are much easier to understand).
<site:source class="TemplateImages" />
Summarized: a Form XObject is a PDF content stream that is a self-contained description of any sequence of graphics objects.
A form XObject may be painted multiple times, either on several pages or at several locations on the same page.
It produces the same results each time, subject only to the graphics state at the time it is invoked.<br />
DO NOT confuse Form XObjects with <i>AcroForms</i>. A Form XObjects isn't a form(field) as in the context of
<i>interactive forms</i> (see <site:tutorial chapter="/forms">Forms</site:tutorial>). That's why we prefer to use
<site:doc class="com.lowagie.text.pdf.PdfTemplate">PdfTemplate</site:doc> when refering to Form XObjects.<br />
In iText PdfTemplates are mainly used for two reasons:
<ol>
<li>You want to <i>repeat</i> a certain sequence of PDF syntax, but you want to save on disc space (reuse the stream) and processing time (write the stream only once).</li>
<li>You want to add some content to a page, but you <i>don't know in advance</i> what the content will be. For instance: you want to add a footer saying 'this it is page x of y',
but you don't know the value of y yet. In this case, you can add a template for y, but you can wait to add content to the template untill you know the exact number of pages
in your document.</li>
</ol>
There's probably only one thing left that keeps you from using PdfTemplates: you will have to learn about <site:tutorial chapter="/directcontent/pageevents" section="eps">Page Events</site:tutorial> first,
to know how to add a PdfTemplate each time a page is finished, or to fill the contents of a PdfTemplate, just before the Document is closed.
</div>
	</site:section>
	<site:section name="Postscript">
		<site:sectiontitle>PostScript XObjects</site:sectiontitle>
<div>
There is also basic support for PostScript XObjects (in iText <site:doc class="com.lowagie.text.pdf.PdfPSXObject">PdfPSXObject</site:doc> extends
<site:doc class="com.lowagie.text.pdf.PdfTemplate">PdfTemplate</site:doc>). You can add PS Syntax to this object with
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setLiteral(String)">setLiteral</site:doc>
and add the PS XObject with
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="addPSXObject(com.lowagie.text.pdf.PdfPSXObject)">PdfContentByte.addPSXObject</site:doc>).
However, it is no longer recommended to use Postscript XObjects in PDF.
These PS fragments are used only when printing to a PostScript output device.
They should be used with extreme caution, because they can cause PDF files
to print incorrectly (See section 4.7.1 if the PDF Reference Manual: this feature is likely to be removed from PDF in a future version).
</div>
	</site:section>
	</site:chapter>

</site:page>