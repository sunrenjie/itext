<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Page Events</site:title>
		<site:summary>Add content directly to the PDF file using the PdfContentByte class.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, PdfContentByte, Graphics, absolute positions, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>PDF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="EndPage" standalone="yes" />
			<site:result>endpage.pdf</site:result>
			<site:description>Headers and footers in an EndPage event</site:description>
		</site:example>
		<site:example>
			<site:java src="PageNumbersWatermark" standalone="yes" />
			<site:result>pageNumbersWatermark.pdf</site:result>
			<site:externalresource>logo.gif</site:externalresource>
			<site:description>Making a document with a header containing 'page x of y' and with a watermark on every page.</site:description>
		</site:example>
		<site:example>
			<site:java src="Bookmarks" standalone="yes" />
			<site:result>bookmarks.pdf</site:result>
			<site:description>Using paragraph events</site:description>
		</site:example>
		<site:example>
			<site:java src="Events" standalone="yes" />
			<site:result>RomeoJuliet.pdf</site:result>
			<site:extrajar>crimson.jar</site:extrajar>
			<site:externalresource>tagmapRomeoJuliet.xml</site:externalresource>
			<site:externalresource>playRomeoJuliet.xml</site:externalresource>
			<site:description>Using PageEvents</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>

	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="14" />
		</site:book>
		</div>
	</site:section>
	<site:section name="pageevents">
		<site:sectiontitle>Page Event Methods</site:sectiontitle>
<div>
If you generate a PDF file using high-level iText objects, you add structured content
to a <site:doc class="com.lowagie.text.Document">Document</site:doc>-object.
This content is automatically being translated to PDF syntax by the
<site:doc class="com.lowagie.text.pdf.PdfWriter">PdfWriter</site:doc>.
The hidden (package private) object <site:doc class="com.lowagie.text.pdf.PdfDocument">PdfDocument</site:doc>-object
is responsible for drawing the content on different pages.
While this happens, the process adding content (your program) is not aware of all this PDF specific work.
You can ask the <site:doc class="com.lowagie.text.pdf.PdfWriter">PdfWriter</site:doc> for the current page number
with <site:doc class="com.lowagie.text.pdf.PdfWriter" target="getPageNumber()">PdfWriter.getPageNumber()</site:doc>,
but this is all very limited. If you really want to control what happens inside the writer,
you need to add a <site:doc class="com.lowagie.text.pdf.PdfPageEvent">PdfPageEvent</site:doc>:<br />
<pre class="commandline">// class MyPageEvent implements the PdfPageEvent interface
MyPageEvent event = new MyPageEvent();
writer.setPageEvent(event);</pre>
The <site:doc class="com.lowagie.text.pdf.PdfPageEvent">PdfPageEvent</site:doc> interface contains the following methods you have to implement in your own class MyPageEvent:
<ul>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onOpenDocument(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onOpenDocument(PdfWriter writer, Document document)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onCloseDocument(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onCloseDocument(PdfWriter writer, Document document)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onStartPage(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onStartPage(PdfWriter writer, Document document)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onEndPage(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onEndPage(PdfWriter writer, Document document)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onParagraph(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onParagraph(PdfWriter writer, Document document, float paragraphPosition)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onParagraphEnd(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onParagraphEnd(PdfWriter writer,Document document,float paragraphPosition)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onChapter(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float,%20com.lowagie.text.Paragraph)">onChapter(PdfWriter writer,Document document,float paragraphPosition, Paragraph title)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onChapterEnd(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onChapterEnd(PdfWriter writer,Document document,float paragraphPosition)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onSection(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float,%20int,%20com.lowagie.text.Paragraph)">onSection(PdfWriter writer,Document document,float paragraphPosition, int depth, Paragraph title)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onSectionEnd(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onSectionEnd(PdfWriter writer,Document document,float paragraphPosition)</site:doc>;</li>
<li>public void <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onGenericTag(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20com.lowagie.text.Rectangle,%20java.lang.String)">onGenericTag(PdfWriter writer, Document document, Rectangle rect, String text)</site:doc>;</li>
</ul>
Of course, you don't always need all these methods, so it's easier not just to
implement the <site:doc class="com.lowagie.text.pdf.PdfPageEvent">PdfPageEvent</site:doc>-interface, but to extend
the <site:doc class="com.lowagie.text.pdf.PdfPageEventHelper">PdfPageEventHelper</site:doc>. This class contains 'empty'
implementations of all the methods mentioned above. You just have to override
the methods you need.<br /><br />
<div class="subtitle">Open and close a document, start and end a page</div>
The <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onOpenDocument(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onOpenDocument</site:doc> method
and the first <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onStartPage(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onStartPage</site:doc> method
are called just after the document is opened and after the first page has been initialized.
<site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onOpenDocument(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onOpenDocument</site:doc> is mostly used to initialize some parameters that you defined
yourself in your own page event implemantation.
<site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onStartPage(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onStartPage</site:doc> is called just after each new page has been initialized.
The <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onEndPage(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onEndPage</site:doc> method is called just before a new page is started
and initialized. This is the best method to add some headers and footers.
I don't recomment to add headers and footers in the <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onStartPage(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onStartPage</site:doc> method,
because this can lead to all kinds of quirky effect (for instance an extra, unwanted blank page at the end of your document).
The <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onCloseDocument(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document)">onCloseDocument</site:doc>
method is called just before all streams are closed. This is the ideal place to complete
the template containing the total number of pages, if you have some footer indicating
'page X of Y'. It is only just before closing the document that you know the exact value of Y.
In your implementation of these methods, you always get the instance of the writer that
triggered the event a <site:doc class="com.lowagie.text.Document">Document</site:doc>-object. THIS IS NOT THE SAME
OBJECT as the one you are adding structured content to. This is an instance of the (hidden)
<site:doc class="com.lowagie.text.pdf.PdfDocument">PdfDocument</site:doc>-object. You can only invoke a limited number of
methods on this object.<br /><br />
<div class="subtitle">Adding paragraphs, chapters, section</div>
When a paragraph is added, you might want to know the current Y position on your page.
Below you'll find an example adding bookmarks automatically;
each entry in the outline tree points at the starting position of a paragraph.
This outline tree is generated in an <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onParagraph(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onParagraph</site:doc> event.
If you need to add some object at an absolute place just after a paragraph, just use
the <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onParagraphEnd(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onParagraphEnd</site:doc>-method.<br />
The methods <site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onChapter(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float,%20com.lowagie.text.Paragraph)">onChapter</site:doc>,
<site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onSection(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float,%20int,%20com.lowagie.text.Paragraph)">onSection</site:doc>,
<site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onChapterEnd(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onChapterEnd</site:doc> and
<site:doc class="com.lowagie.text.pdf.PdfPageEvent" target="onSectionEnd(com.lowagie.text.pdf.PdfWriter,%20com.lowagie.text.Document,%20float)">onSectionEnd</site:doc>
do just the same, but the first two also pass the chapter or section title. This can be used
to set the content of some header or footer (as in the <site:tutorial chapter="/directcontent/pageevents" section="romeojuliet">'Romeo and Juliet' example</site:tutorial> below), or to construct a Table-of-Contents.<br /><br />
<div class="subtitle">Generic tags</div>
Generic tags are already discussed elsewhere, for instance when we added
<site:tutorial chapter="/objects/chunk" section="generic">generic functionality</site:tutorial>
to a Chunk object. In the <site:tutorial chapter="/directcontent/pageevents" section="romeojuliet">'Romeo and Juliet' example</site:tutorial>, we are going to use this method to count
the number of interventions of each character in the play.
</div>
	</site:section>
	
	<site:section name="examples">
		<site:sectiontitle>Examples</site:sectiontitle>
<div>
<div class="subtitle">Headers/Footers</div>
If you want to add a Header and/or a Footer to each page in your document,
you have to do this in an <span class="commandline">onEndPage</span> event.
<site:source class="EndPage" />
<div class="subtitle">Page X of Y</div>
In this example, not only we add a header and a footer.
We also use a template in the footer to display 'page X of Y'.
The total number of pages is added to the PdfTemplate in the
<span class="commandline">onCloseDocument</span> event.
As you can see, watermarks can be added in <span class="commandline">onStartPage</span>,
but you could also do this in <span class="commandline">onEndPage</span>
(where we also draw a Rectangle around the text on each page).
<site:source class="PageNumbersWatermark" />
<div class="subtitle">Bookmarks</div>
This example was already mentioned in the chapter on
<site:tutorial chapter="/objects/bookmarks" section="bookmarks">bookmarks</site:tutorial>.
<site:source class="Bookmarks" />
</div>
	</site:section>
	
	<site:section name="romeojuliet">
		<site:sectiontitle>Romeo and Juliet: XML to PDF</site:sectiontitle>
<div>
In this example, we combine some of the most interesting functionalities of iText.
We have an XML file (<a href="playRomeoJuliet.xml">playRomeoJuliet.xml</a>) containing the complete play 'Romeo and Juliet' by William Shakespeare.
We have defined a tagmap (<a href="tagmapRomeoJuliet.xml">tagmapRomeoJuliet.xml</a>) that translates the tags in the XML to tags that can be understood by iText.
iText will parse the XML and generate the PDF file using this tagmap.<br />
A <span class="commandline">Speaker</span>-class was written to keep track
of all the different speakers. As you can see in the page event implementation,
we update the list of speakers in the <span class="commandline">onGenericTag</span> method.
We do some initialisations in the <span class="commandline">onOpenDocument</span> method,
we keep track of the current act in the <span class="commandline">onChapter</span> method,
we add this information as a header on every even page of the document and also put
a 'page X of Y'-footer in the <span class="commandline">onPageEnd</span> method
and finally, we set the value of this Y in the <span class="commandline">onCloseDocument</span> method.
After the document is parsed, we retrieve the alphabetical list of speaker from out event class
and add an extra page with this info.
<site:source class="Events" />
</div>
	</site:section>
	</site:chapter>

</site:page>