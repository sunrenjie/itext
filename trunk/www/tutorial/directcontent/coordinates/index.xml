<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Coordinate Systems</site:title>
		<site:summary>Coordinate Systems - changing the Current Transformation Matrix (CTM)</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, PdfContentByte, transformation matrix, coordinate systems, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>PDF</site:keyword>
			<site:keyword>Coordinate Systems</site:keyword>
			<site:keyword>Algebra</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="XandYcoordinates" standalone="yes" />
			<site:result>XandY.pdf</site:result>
			<site:description>Puts some marks at specific X and Y coordinates; connects the marks with a line and puts some text next to the marks</site:description>
		</site:example>
		<site:example>
			<site:java src="UpsideDown" standalone="yes" />
			<site:result>upsidedown.pdf</site:result>
			<site:description>Same example as above, but now the origin is in the upper left corner</site:description>
		</site:example>
		<site:example>
			<site:java src="AffineTransformation" standalone="yes" />
			<site:result>affinetransformation.pdf</site:result>
			<site:description>Same example as above, but now the X and Y coordinates are scaled</site:description>
		</site:example>
		<site:example>
			<site:java src="Transformations" standalone="yes" />
			<site:result>transformations.pdf</site:result>
			<site:description>Add a template using different transformation matrices</site:description>
		</site:example>
		<site:example>
			<site:java src="TransformImage" standalone="yes" />
			<site:result>transformimage.pdf</site:result>
			<site:externalresource>hitchcock.png</site:externalresource>
			<site:description>Add an image using different transformation matrices</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="10" />
		</site:book>
		</div>
	</site:section>
	<site:section name="xycoordinates">
		<site:sectiontitle>The coordinate system</site:sectiontitle>
<div>
See PDF Reference Manual (version 1.6) p169:
<blockquote>Coordinate systems define the canvas on which all painting occurs.
They determine the position, orientation, and size of the text, graphics, and
images that appear on a page.</blockquote>
If you start a new page in PDF, the CTM (current transformation matrix)
maps positions from user coordinates to device coordinates. The origin of
the coordinate system is in the lower left corner of the page by default.
The x-axis is oriented horizontally to the right, the y-axis vertically
to the upper left corner. All measurements are done in points.
This is not an iText specific choice. All this is documented in the PDF Reference Manual,
section 4.2 Coordinate Systems.
<site:source class="XandYcoordinates" />
If you print the resulting PDF of the example and measure the locations on the page,
you will see that the distances measured from the bottom or the left side of the page
are not always correct. Adobe's print dialog has several options (like "fit to paper")
that change the printed result, so be careful!<br />
</div>
	</site:section>
	<site:section name="transform">
		<site:sectiontitle>Transformations</site:sectiontitle>
<div>
There are different ways to change the CTM.<br />
You can use the method
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="concatCTM(float,%20float,%20float,%20float,%20float,%20float)">concatCTM(float, float, float, float, float, float)</site:doc>.
For instance, if you want to shift the origin to the upper left corner and change the orientation of the y-axis,
you can use this statement right after getting the PdfContentByte:
<pre class="commandline">cb.concatCTM(1f, 0f, 0f, -1f, 0f, PageSize.A4.height());</pre>
If we take the same code as in the first example, but apply this new transformation matrix, we see that
everything is upside-down now and all text is mirrored.
<site:source class="UpsideDown" />
These transformations are called <i>affine transformations</i>
and you should have learnt about them at school when you were about 17 years old.
If you want to freshen up your memory, I've got some algebra for you:<br /><br />
if you want to translate, scale or rotate images or text, you need to use a Transformation Matrix.
Most iText methods involving transformations ask you for the parameters a, b, c, d, e and f.
Those parameters are elements of the Transformation Matrix:<br />
<table>
<tr>
<td rowspan="3" valign="middle"><font size="+4">[</font></td>
<td>a</td>
<td>b</td>
<td>0</td>
<td rowspan="3" valign="middle"><font size="+4">]</font></td>
</tr>
<tr>
<td>c</td>
<td>d</td>
<td>0</td>
</tr>
<tr>
<td>e</td>
<td>f</td>
<td>1</td>
</tr>
</table>
The third column is fixed because we are only interested in 2D transformations,
we are not discussing 3D here.
With the parameters e and f, you can specify a translation.
The following matrix moves everything e pixels in x-direction and f pixels
in y-direction.
<table>
<tr>
<td rowspan="3" valign="middle"><font size="+4">[</font></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td rowspan="3" valign="middle"><font size="+4">]</font></td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>e</td>
<td>f</td>
<td>1</td>
</tr>
</table>
You can use the a and d parameter to scale.
The following matrix doubles everything in x-direction and triples everything in y-direction:
<table>
<tr>
<td rowspan="3" valign="middle"><font size="+4">[</font></td>
<td>2</td>
<td>0</td>
<td>0</td>
<td rowspan="3" valign="middle"><font size="+4">]</font></td>
</tr>
<tr>
<td>0</td>
<td>3</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</table>
If you want to rotate something, you have to change a, b, c and d.
With angle equals to the rotation angle in radians, you have a matrix like this:
<table>
<tr>
<td rowspan="3" valign="middle"><font size="+4">[</font></td>
<td>Math.cos(angle)</td>
<td>Math.sin(angle)</td>
<td>0</td>
<td rowspan="3" valign="middle"><font size="+4">]</font></td>
</tr>
<tr>
<td>-Math.sin(angle)</td>
<td>Math.cos(angle)</td>
<td>0</td>
</tr>
<tr>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
</table>
There is one serious caveat when you rotate an object: the coordinate of the
rotation pivot is (0, 0). If you rotate something, you have to watch out that
it is not rotated 'off' your page. you may have to perform a
translation to keep the object on the page.
Of course you can combine translation (tX, tY), scaling (sX, sY) rotation (angle) in one matrix:
<table>
<tr>
<td rowspan="3" valign="middle"><font size="+4">[</font></td>
<td>sX * Math.cos(angle)</td>
<td>sY * Math.sin(angle)</td>
<td>0</td>
<td rowspan="3" valign="middle"><font size="+4">]</font></td>
</tr>
<tr>
<td>-sX * Math.sin(angle)</td>
<td>sY * Math.cos(angle)</td>
<td>0</td>
</tr>
<tr>
<td>tX</td>
<td>tY</td>
<td>1</td>
</tr>
</table>
So you will have to use these parameters:
<ul>
<li>a = sX * Math.cos(angle);</li>
<li>b = sY * Math.sin(angle);</li>
<li>c = -sX * Math.sin(angle);</li>
<li>d = sY * Math.cos(angle)</li>
<li>e = tX;</li>
<li>f = tY;</li>
</ul><br />
<br />
Another way to change the CTM is by using
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="transform(java.awt.geom.AffineTransform)">transform(java.awt.geom.AffineTransform)</site:doc>
As you can see AffineTransform is an object in the JDK.
It comes with some getInstance methods that are easier to understand.
If you want a scale coordinate system, just get a 'scale instance':
<pre class="commandline">cb.transform(AffineTransform.getScaleInstance(1.2, 0.75));</pre>
Check SUN's API for more information.
<site:source class="AffineTransformation" />
</div>
	</site:section>
	<site:section name="templates">
		<site:sectiontitle>Adding PdfTemplates</site:sectiontitle>
<div>
The stuff above probably seems rather theoretical, but it was a necessary introduction
to this part: if you are using PdfTemplates, you are going to need a transformation matrix.
Up till now, we only have used this method to add a PdfTemplate:
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="addTemplate(com.lowagie.text.pdf.PdfTemplate,%20float,%20float)">PdfContentByte.addTemplate(com.lowagie.text.pdf.PdfTemplate, float, float)</site:doc>.
This method performs a translation, using this matrix:
<table>
<tr>
<td rowspan="3" valign="middle"><font size="+4">[</font></td>
<td>1</td>
<td>0</td>
<td>0</td>
<td rowspan="3" valign="middle"><font size="+4">]</font></td>
</tr>
<tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>x</td>
<td>y</td>
<td>1</td>
</tr>
</table>
In fact, the method just calls the more sophisticated method:
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="addTemplate(com.lowagie.text.pdf.PdfTemplate,%20float,%20float,%20float,%20float,%20float,%20float)">addTemplate(com.lowagie.text.pdf.PdfTemplate, float,  float, float, float, float, float)</site:doc>.<br />
Instead of <span class="commandline">cb.addTemplate(template, x, y)</span>, you could call
<span class="commandline">cb.addTemplate(template, 1, 0, 0, 1, x, y)</span> (that's exactly what happens internally in iText).
The parameters in this method are the (a, b, c, d, e, f) values
as explained <site:tutorial chapter="/directcontent/coordinates" section="transform">above</site:tutorial>.
<site:source class="Transformations" /></div>
	</site:section>
	<site:section name="images">
		<site:sectiontitle>Adding Images</site:sectiontitle>
<div>
What was explained for PdfTemplate objects also goes for Image objects.
There's a method <site:doc class="com.lowagie.text.pdf.PdfContentByte" target="addImage(com.lowagie.text.Image)">addImage(com.lowagie.text.Image)</site:doc>
that adds the Image at an absolute position (provided that you used
<site:doc class="com.lowagie.text.Image" target="setAbsolutePosition(float,%20float)">setAbsolutePosition(float, float)</site:doc> first).
But there's also <site:doc class="com.lowagie.text.pdf.PdfContentByte" target="addImage(com.lowagie.text.Image,%20float,%20float,%20float,%20float,%20float,%20float)">addImage(com.lowagie.text.Image, float, float, float, float, float, float)</site:doc>
that allows you to transform the Image.
<site:source class="TransformImage" />
This is very tricky stuff. It's doable for PdfTemplates, but if you want to transform Images,
you'd better trust on iText to construct the transformation matrix.
Class Image has sufficient methods to perform most of the
<site:tutorial chapter="/objects/images" section="transformations">Image transformations</site:tutorial>
you are going to need.
</div>
	</site:section>
	</site:chapter>

</site:page>