<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title status="finished">Colors</site:title>
		<site:summary>Colors, Transparency, Spotcolors, Patterns and Shading.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, patterns, shading, transparency, colors, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>PDF</site:keyword>
			<site:keyword>Colors</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="SpotColors" standalone="yes" />
			<site:result>spotcolor.pdf</site:result>
			<site:description>Using spotcolors.</site:description>
		</site:example>
		<site:example>
			<site:java src="Pattern" standalone="yes" />
			<site:result>pattern.pdf</site:result>
			<site:description>A stencil example (you define a shape and a default color).</site:description>
		</site:example>
		<site:example>
			<site:java src="Patterns" standalone="yes" />
			<site:externalresource>pngnow.png</site:externalresource>
			<site:result>patterns.pdf</site:result>
			<site:description>Colored patterns.</site:description>
		</site:example>
		<site:example>
			<site:java src="Shading" standalone="yes" />
			<site:result>shading.pdf</site:result>
			<site:description>Shading.</site:description>
		</site:example>
		<site:example>
			<site:java src="ShadingPattern" standalone="yes" />
			<site:result>shading_pattern.pdf</site:result>
			<site:description>Shading pattern.</site:description>
		</site:example>
		<site:example>
			<site:java src="Transparency" standalone="yes" />
			<site:result>transparency.pdf</site:result>
			<site:description>Reproducing PLATE 16 on p1053 in the PDF Reference Manual</site:description>
		</site:example>
		<site:example>
			<site:java src="Groups" standalone="yes" />
			<site:result>groups.pdf</site:result>
			<site:description>Making images transparent.</site:description>
		</site:example>
		<site:example>
			<site:java src="SoftMask" standalone="yes" />
			<site:externalresource>otsoe.jpg</site:externalresource>
			<site:result>softmask.pdf</site:result>
			<site:description>Making images transparent.</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="11" />
		</site:book>
		</div>
	</site:section>
	<site:section name="device">
		<site:sectiontitle>Device Color spaces</site:sectiontitle>
<div>
In the chapter on Graphics, we already discussed methods such as
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setRGBColorFill(int,%20int,%20int)">setRGBColorFill/Stroke</site:doc> (Red-Green-Blue),
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setCMYKColorFill(int,int,%20int,%20int)">setCMYKColorFill/Stroke</site:doc> (Cyan-Magenta-Yellow-Black) and
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setGrayFill(float)">setGrayFill/Stroke</site:doc> (grayscale).
With those methods, you can change to color that is used to fill or stroke paths.
Those methods also change the color space automatically to DeviceRGB, DeviceCMYK or DeviceGray.
These are <i>device color spaces</i>; they directly specify colors or shades of gray
that the output device is to produce.<br />
In PDF, a lot of other color spaces are possible. Not all of the PDF functionality is supported in iText.
If you need a more specialized feature and you don't find it here, you should post a question
to the mailing-list to see if it's already implemented in iText. If you need functionality
such as transparancy, spotcolor, pantone, patterns or shading, just scroll down this page and you'll find
lots of examples.
</div>
	</site:section>
	
	<site:section name="spotcolors">
		<site:sectiontitle>Separation Color Spaces</site:sectiontitle>
<div>
PDF Reference Manual p234:
<blockquote>
Color output devices produce full color by combining primary or process colorants
in varying amounts. On an additive color device such as a display, the primary
colorants consist of red, green, and blue phosphors; on a subtractive device such
as a printer, they typically consist of cyan, magenta, yellow, and sometimes black inks.
In addition some devices can apply special colorants, often called <i>spot colorants</i>,
to produce effects that can not be achieved with the standard process colorants alone.
Examples include metallic and fluorescent colors and special textures.<br />
When printing a page, most devices produce a single <i>composite</i> page
on which all process colorants (and spot colorants, if any) are combined.
However, some devices, such as imagesetters, produce a separate, monochromatic rendition
of the page, called a <i>separation</i>, for each colorant. When the separations are later
combined - on a printing process, for example - and the proper inks or colorants are applied
to them, the result is a full-color page.<br />
A <i>separation color space</i> provides a means for specifying the use of additional
colorants or for isolating the control of individual color components of a device color space
for a subtractive device. When such a space is the current color space, the current
color is a single-component value, called a <i>tint</i>, that controls the application
of the given colorant or color components only.</blockquote>
In iText, you can create SpotColors with the
<site:doc class="com.lowagie.text.pdf.PdfSpotColor">PdfSpotColor</site:doc> class.
You need to give a name to the color, a tint and an alternative color space value.
For this last parameter, the class <site:doc class="com.lowagie.text.pdf.ExtendedColor">ExtendedColor</site:doc> was created.
It extends java.awt.Color. If you want to create a PdfSpotColor with RGB as alternative color space,
use java.awt.Color. If you want CMYK, use <site:doc class="com.lowagie.text.pdf.CMYKColor">CMYKColor</site:doc>
which extends ExtendedColor. Use <site:doc class="com.lowagie.text.pdf.GrayColor">GrayColor</site:doc> if you want grayscale.<br />
These PdfSpotColors can be used with the
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setColorFill(com.lowagie.text.pdf.PdfSpotColor,%20float)">PdfContentByte.setColorFill/Stroke</site:doc> methods.
If you want to use a PdfSpotColor for high level objects, you have to use the
<site:doc class="com.lowagie.text.pdf.SpotColor">SpotColor</site:doc> class.
<site:source class="SpotColors" />
</div>
	</site:section>

	<site:section name="patterns">
		<site:sectiontitle>Patterns</site:sectiontitle>
<div>
When stroking or filling a path, we always used a single color. However, it is also
possible to apply <i>paint</i> that consists of a repeating graphical figure or a smoothly varying color gradient
instead of a simple color. Such a repeating figure or smooth gradient is called a <i>pattern</i>.
<div class="subtitle">Tiling patterns</div>
See PDF Reference Manual version 1.6 section 4.6.2 (p261)
<blockquote>A <i>tiling pattern</i> consists of a small graphical figure called a
<i>pattern cell</i>. Painting with the pattern replicates the cell at fixed horizontal
and vertical intervals to fill an area. The effect is as if the figure were painted
on the surface of a clear glass tile, identical copies of which were then laid down in
an array covering the area and trimmed to its boundaries. This process is called tiling
the area.</blockquote>
We distinguish two kinds of tiling patterns: <i>colored tiling patterns</i> and <i>uncolored tiling patterns</i>.<br />
A colored tiling pattern is a pattern who's color is self-contained.
When the content stream begins, the current color is the one that was
initially in effect in the pattern's parent content stream. In the course of
painting the pattern cell, the pattern's content stream explicitly sets the color of
each graphical element it paints (a pattern cell can contain elements that are painted in different colors).<br />
An uncolored tiling pattern is a pattern that has no inherent color: the color must be
specified separately whenever the pattern is used. The content stream describes
a <i>stencil</i> through which the color is to be poured.<br />
In iText, you create a <site:doc class="com.lowagie.text.pdf.PdfPatternPainter">PdfPatternPainter</site:doc> with one
of the differen createPattern methods in PdfContentByte. When you specify a default color, the pattern is automatically a 'stencil' pattern.
As an uncolored tiling pattern has no color of its own, so you have to define a default color. This color may be null if you plan to define the color
each time you invoke setPatternFill.<br />
In short, these are the methods you are going to use to create a <site:doc class="com.lowagie.text.pdf.PdfPatternPainter">PdfPatternPainter</site:doc>:
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="createPattern(float,%20float)">createPattern(float, float)</site:doc> (colored pattern, just defining a width and a height, the horizontal and vertical intervals are equal to width and height),
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="createPattern(float,%20float,%20java.awt.Color)">createPattern(float, float, java.awt.Color)</site:doc> (uncolored pattern, defining a width and a height and the default color for the uncolored pattern),
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="createPattern(float,%20float,%20float,%20float)">createPattern(float, float, float, float)</site:doc> (colored pattern, defining a width, a height and the horizontal/vertical interval) and
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="createPattern(float,%20float,%20float,%20float,%20java.awt.Color)">createPattern(float, float, float, float, java.awt.Color)</site:doc> (uncolored pattern).<br />
Once you have a <site:doc class="com.lowagie.text.pdf.PdfPatternPainter">PdfPatternPainter</site:doc> object, you can use it in the different
<site:doc class="com.lowagie.text.pdf.PdfWriter" target="setPatternFill(com.lowagie.text.pdf.PdfPatternPainter)">setPatternFill</site:doc>/<site:doc class="com.lowagie.text.pdf.PdfWriter" target="setPatternStroke(com.lowagie.text.pdf.PdfPatternPainter)">setPatternStroke</site:doc> methods.
As was the case with spot colors, you can also use a class extending <site:doc class="com.lowagie.text.pdf.ExtendedColor">ExtendedColor</site:doc>
to use a pattern as color for high level objects: <site:doc class="com.lowagie.text.pdf.PatternColor">PatternColor</site:doc>.
<site:source class="Pattern" />
<site:source class="Patterns" />
<div class="subtitle">Shading patterns</div>
See PDF Reference Manual version 1.6 section 4.6.3 (p272)
<blockquote><i>Shading patterns</i> provide a smooth transition between colors and across an area
to be painted, independent of the resolution of any particular output device and without
specifying the number of steps in the color transition.</blockquote>
There are different types of shading. Check the API of
<site:doc class="com.lowagie.text.pdf.PdfShading">PdfShading</site:doc>
if you want to know how to construct a Shading object that can be used to paint a path
with method <site:doc class="com.lowagie.text.pdf.PdfContentByte" target="paintShading(com.lowagie.text.pdf.PdfShading)">paintShading(com.lowagie.text.pdf.PdfShading)</site:doc>
(this paints the path, so you don't have to call <site:doc class="com.lowagie.text.pdf.PdfContentByte" target="fill()">fill()</site:doc> or <site:doc class="com.lowagie.text.pdf.PdfContentByte" target="stroke()">stroke()</site:doc>).
<site:source class="Shading" />
You can also create a <site:doc class="com.lowagie.text.pdf.PdfShadingPattern">PdfShadingPattern</site:doc>.
This can be used to paint a path (<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="paintShading(com.lowagie.text.pdf.PdfShadingPattern)">paintShading(com.lowagie.text.pdf.PdfShadingPattern)</site:doc>),
but also to set a fill or stroke color:
<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setShadingFill(com.lowagie.text.pdf.PdfShadingPattern)">setShadingFill(com.lowagie.text.pdf.PdfShadingPattern)</site:doc>/<site:doc class="com.lowagie.text.pdf.PdfContentByte" target="setShadingStroke(com.lowagie.text.pdf.PdfShadingPattern)">setShadingStroke(com.lowagie.text.pdf.PdfShadingPattern)</site:doc>.
<site:source class="ShadingPattern" />
Again there's a class extending <site:doc class="com.lowagie.text.pdf.ExtendedColor">ExtendedColor</site:doc>
to use a shading pattern as color for high level objects: <site:doc class="com.lowagie.text.pdf.ShadingColor">ShadingColor</site:doc>.
</div>
	</site:section>
	
	<site:section name="transparency">
		<site:sectiontitle>Transparency</site:sectiontitle>
<div>
There's a complete chapter on Transparency in the PDF Reference manual (Chapter 7, p483).
If you take a look at the <site:tutorial chapter="/directcontent" section="pdfcontentbyte">iText approach</site:tutorial> of adding content,
you see you can add content to a top layer to cover content in a lower layer or vice-versa.
Since PDF 1.4 however, <i>overlapping</i> content doesn't necessarily mean <i>covering</i> the content that is below (covering in the sense of making it disappear).
With version 1.4 of the PDF specs, the <i>Transparent Imaging Model</i> was introduced, which means you
can now have all of the 'layers' contributing to what is actually shown on a page.<br />
The following image was copied from the PDF Reference Manual (p1053):
<site:image source="transparency.gif">Transparency</site:image><br />
As you can see, there are 4 squares with a half in gray and a half in white.
This is called the <i>backdrop</i> (the stack of all objects that have been specified previously).
After adding these squares, some colored circles were added. In the first square, they were added
without using any transparency. The blue circle covers the yellow one, which covers the red one.<br />
In the second square, we changed the fill <i>opacity</i> to 0.5. Now you see the circles are blending.
You also see the backdrop shining through.<br />
In the third square, the circles are in the same <i>transparency group</i>. Within their group, the objects are
painted with the default opacity (1 = no opacity). The group is painted with opacity 0.5.
So as you see, the blue circle covers, the yellow one, which covers the red one; but when they are
adding above the square, the gray half is blended with the group of circles.<br />
In the fourth square, the circles in the group have an opacity of 0.5, so the colors composite with each other.
The group is added on top of the backdrop with an opacity of 1, but in a different <i>blend mode</i>.
<site:source class="Transparency" />
Chapter 7 in the PDF Reference Manual gives you all the different <i>blend modes</i> (in iText, you
can set them by using the <site:doc class="com.lowagie.text.pdf.PdfGState" target="setBlendMode(com.lowagie.text.pdf.PdfName)">PdfGState.setBlendMode</site:doc>;
see also the chapter on the <site:tutorial chapter="/directcontent/graphics" section="parameters">Graphics State</site:tutorial>,
where you will find a list of all the available blendmodes). Transparancy groups settings are set with
<site:doc class="com.lowagie.text.pdf.PdfTransparencyGroup" target="setIsolated(boolean)">PdfTransparencyGroup.setIsolated</site:doc> (determining the initial backdrop against which its stack is composited) and
<site:doc class="com.lowagie.text.pdf.PdfTransparencyGroup" target="setKnockout(boolean)">PdfTransparencyGroup.setKnockout</site:doc> (determining whether the objects within the stack are composited with one another or only with the group's backdrop.).
<site:source class="Groups" />
Another nice example of applying the Transparent Imaging Model, is the use of an Image as <i>soft mask</i>.
<site:source class="SoftMask" />
</div>
	</site:section>
	</site:chapter>

</site:page>