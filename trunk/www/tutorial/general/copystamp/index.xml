<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title>Manipulating existing PDF documents</site:title>
		<site:summary>How-to copy/manipulate existing PDF documents.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, copy PDF, stamp, existing PDF</site:keywords>
		<site:amazonbooks>
			<site:book asin="1932394796">iText in Action</site:book>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:book asin="0321305310">Adobe Reader 7 Revealed</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>PDF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="TwoOnOne" standalone="yes" />
			<site:externalresource>ChapterSection.pdf</site:externalresource>
			<site:result>2on1.pdf</site:result>
			<site:description>Combines 2 pages on 1</site:description>
		</site:example>
		<site:example>
			<site:java src="AddWatermarkPageNumbers" standalone="yes" />
			<site:externalresource>ChapterSection.pdf</site:externalresource>
			<site:externalresource>SimpleAnnotations1.pdf</site:externalresource>
			<site:externalresource>watermark.jpg</site:externalresource>
			<site:result>watermark_pagenumbers.pdf</site:result>
			<site:description>Adds pagenumbers and a watermark to an existing document</site:description>
		</site:example>
		<site:example>
			<site:java src="Register" standalone="yes" />
			<site:externalresource>SimpleRegistrationForm.pdf</site:externalresource>
			<site:result>registered.pdf</site:result>
			<site:result>registered_flat.pdf</site:result>
			<site:description>Fills in a form</site:description>
		</site:example>
		<site:example>
			<site:java src="EncryptorExample" standalone="yes" />
			<site:externalresource>ChapterSection.pdf</site:externalresource>
			<site:result>encrypted.pdf</site:result>
			<site:extrajar>bcprov-jdk14-138.jar</site:extrajar>
			<site:description>Encrypts an existing PDF file</site:description>
		</site:example>
		<site:example>
			<site:java src="Concatenate" standalone="yes" />
			<site:externalresource>ChapterSection.pdf</site:externalresource>
			<site:externalresource>Destinations.pdf</site:externalresource>
			<site:externalresource>SimpleAnnotations1.pdf</site:externalresource>
			<site:argument>ChapterSection.pdf</site:argument>
			<site:argument>Destinations.pdf</site:argument>
			<site:argument>SimpleAnnotations1.pdf</site:argument>
			<site:argument>concatenated.pdf</site:argument>
			<site:result>concatenated.pdf</site:result>
			<site:description>Concatenates existing PDF files</site:description>
		</site:example>
		<site:example>
			<site:java src="ConcatenateForms" standalone="yes" />
			<site:externalresource>SimpleRegistrationForm.pdf</site:externalresource>
			<site:externalresource>TextFields.pdf</site:externalresource>
			<site:externalresource>ChapterSection.pdf</site:externalresource>
			<site:result>concatenatedforms.pdf</site:result>
			<site:description>Concatenates existing PDF files with forms</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>	
		
	<site:section name="inaction">
		<site:sectiontitle>In the book</site:sectiontitle>
		<div>
		<site:book>
			<site:bookchapter chapter="2" />
		</site:book>
		</div>
	</site:section>
	<site:section name="intro">
		<site:sectiontitle>Introduction</site:sectiontitle>
<div>One of the most frequently asked questions on the mailing-list sounds like this:
<i>I have an existing PDF file and I want to change every occurence of the word 'competitor' with the word 'myself'.</i>
Or: <i>I have an existing PDF file and I want to underline every occurence of the word 'FREE'.</i>
If this is what you need, you can stop reading. This just isn't possible with iText.
iText can't convert a text in PDF to some other 'readable' document format such as
RTF, WORD or even plain text. You can't ask iText for the occurrence of a certain word in a document
or its position on a certain page.<br />
This being said, let's see what iText can do. Depending on what you want to achieve,
you are going to use one of the following objects to manipulate existing PDF documents:
<ul>
<li><site:doc class="com.lowagie.text.pdf.PdfWriter">PdfWriter:</site:doc> generates a document from scratch,
but also supports importing pages from other PDF documents. There's one big downside: all interactive features
of the <site:doc class="com.lowagie.text.pdf.PdfImportedPage">PdfImportedPage</site:doc> are lost in the process
(annotations, bookmarks, fields,...) if you use PdfWriter.</li>
<li><site:doc class="com.lowagie.text.pdf.PdfStamper">PdfStamper:</site:doc> can manipulate the
content of one (1!) existing PDF document. For instance: add pagenumbers and a watermark,
fill and/or flatten formfields, sign or encrypt an existing PDF document,...</li>
<li><site:doc class="com.lowagie.text.pdf.PdfEncryptor">PdfEncryptor:</site:doc> uses PdfStamper
to offer some userfriendly methods for encrypting an existing document.</li>
<li><site:doc class="com.lowagie.text.pdf.PdfCopy">PdfCopy:</site:doc> can concatenate (a selection of) pages
from (one or) multiple existing PDF forms. Can adjust bookmarks, but possible loss of formfields.
PdfCopy doesn't allow new content!</li>
<li><site:doc class="com.lowagie.text.pdf.PdfCopyFields">PdfCopyFields:</site:doc> concatenates
multiple PDF documents, keeping the fields (puts the fields of the different sourcefiles in one
Acroform).</li>
</ul>
Before we start with the examples, always remember that <b>the outputfile must have a different name than the input file!!!</b>
If you open a file with PdfReader, you can't write to it with PdfWriter/PdfStamper/PdfCopy!
If you want to 'edit' an existing file, you need to use a temporary file and rename it afterwards.
</div>
	</site:section>
	
	<site:section name="pdfwriter">
		<site:sectiontitle>PdfWriter</site:sectiontitle>
<div>If you want to create a document from scratch, you have to follow the 5 steps as
described in the <site:tutorial chapter="general">Hello World</site:tutorial> chapter.
In <site:tutorial chapter="general" section="step2">step 2</site:tutorial>, you create
a PdfWriter object to which new content will be written. This new content can consist
of <site:tutorial chapter="" section="part2">high-level objects</site:tutorial> added
to a <site:doc class="com.lowagie.text.Document">Document</site:doc>-object or it
can be <site:tutorial chapter="" section="part4">direct content</site:tutorial> added
to a <site:doc class="com.lowagie.text.pdf.PdfContentByte">PdfContentByte</site:doc>-object.
<site:doc class="com.lowagie.text.pdf.PdfImportedPage">PdfImportedPage</site:doc> is
an object that can be added as direct content. You get PdfImportedPage objects from
PdfReader:
<pre class="commandline">PdfReader reader = new PdfReader("existing.pdf");
PdfImportedPage page1 = writer.getImportedPage(reader, 1);
directcontent.addTemplate(page1, 1, 0, 0, 1, 0, 0);</pre>
Note that you can't change the content of a PdfImportedPage-object.
If you want to write extra content over or under the page, you need
to ask the PdfWriter object for a PdfContentByte object.
This is explained in the tutorial part on
<site:tutorial chapter="" section="part4">direct content</site:tutorial>,
so is the meaning of the <site:tutorial chapter="/directcontent/coordinates">parameters</site:tutorial> of the <site:tutorial chapter="/directcontent" section="templates">addTemplate</site:tutorial> method.
In the example below, imported pages are scaled so that two pages in portrait fit on one page in landscape.
<site:source class="TwoOnOne" />
</div>
	</site:section>
	
	<site:section name="pdfstamper">
		<site:sectiontitle>PdfStamper</site:sectiontitle>
<div>If you want to change the contents of <i>one</i> existing PDF file
and add extra content such as watermarks, pagenumbers, extra headers,...
<site:doc class="com.lowagie.text.pdf.PdfStamper">PdfStamper</site:doc>
is the object you need.
<pre class="commandline">PdfReader reader = new PdfReader("existing.pdf");
PdfStamper stamp = new PdfStamper(reader,
  new FileOutputStream("stamped.pdf"));
PdfContentByte under = stamp.getUnderContent(1);
// change the content beneath page 1
PdfContentByte over = stamp.getOverContent(1);
// change the content on top of page 1
stamp.close()</pre>
Again you will need to read the chapters on <site:tutorial chapter="" section="part4">direct content</site:tutorial>
in order to know how to add text, images, etc...
In the example below, we add a watermark under the existing text and the word 'DUPLICATE' on top of the text.
We also add an extra title page.
<site:source class="AddWatermarkPageNumbers" />
PdfStamper is also the class you need if you want to fill in AcroForms.
Below, you'll find an example that fills in a simple form, once with and
once without formflattening. More examples will follow in the chapter on
<site:tutorial chapter="/forms/fill">formfilling</site:tutorial>.
<site:source class="Register" />
If you need to encrypt an existing document, you can do this with PdfStamper too,
but there is a helper class called <site:doc class="com.lowagie.text.pdf.PdfEncryptor">PdfEncryptor</site:doc>
that offers some methods that are more userfriendly:
<pre class="commandline">PdfEncryptor.encrypt(reader,
  new FileOutputStream("encrypted.pdf"),
  "Hello".getBytes(),
  "World".getBytes(),
  PdfWriter.AllowPrinting | PdfWriter.AllowCopy,
  false)</pre>
In the example 'Hello' is set as the userpassword, you'll need it to open the document with Acrobat Reader.
'World' is the ownerpassword, you'll need it to read it with an application (for instance with <site:doc class="com.lowagie.text.pdf.PdfReader">PdfReader</site:doc>).
The 4 parameter defines the permissions. This is done by <i>or</i>-ing the following integers:
<ul>
<li>PdfWriter.AllowPrinting</li>
<li>PdfWriter.AllowModifyContents</li>
<li>PdfWriter.AllowCopy</li>
<li>PdfWriter.AllowModifyAnnotations</li>
<li>PdfWriter.AllowFillIn (128 bit only)</li>
<li>PdfWriter.AllowScreenReaders (128 bit only)</li>
<li>PdfWriter.AllowAssembly (128 bit only)</li>
<li>PdfWriter.AllowDegradedPrinting (128 bit only)</li>
</ul>
The boolean lets you choose between 40 bit encryption (false) or 128 bit encryption (true).
<site:source class="EncryptorExample" />
</div>
	</site:section>
	
	<site:section name="pdfcopy">
		<site:sectiontitle>PdfCopy</site:sectiontitle>
<div>Allthough you could work around the PdfStamper's <i>one document only</i>
limitation by adding new pages, you'd better use <site:doc class="com.lowagie.text.pdf.PdfCopy">PdfCopy</site:doc>
if you only want to copy (a selection of) pages from one or more PDF files into one resulting PDF.
And if you don't need to change the contents of one or more PDF files
(maybe just the bookmarks). The syntax of PdfCopy looks very similar to the
syntax of PdfWriter:
<pre class="commandline">PdfReader reader = new PdfReader("existing.pdf");
Document document = new Document(reader.getPageSizeWithRotation(1));
PdfCopy copy = new PdfCopy(document, new FileOutputStream(outFile));
document.open();
PdfImportedPage page = copy.getImportedPage(reader, i);
copy.addPage(page);
document.close();</pre>
The example can be used as a commandline tool to concatenate existing PDF files.
<site:source class="Concatenate" />
There's one big problem with PdfCopy: it doesn't work well with files containing AcroForms.
If you want to concatenate existing PDF files with different AcroForms, you must use
the <site:doc class="com.lowagie.text.pdf.PdfCopyFields">PdfCopyFields</site:doc> class.
All the documents are kept in memory unlike PdfCopy. The rules for the form field concatenation are the same as in Acrobat. 
Note that if you have fields with the same name they will me merged so, it's probably
a good idea to rename them if that's the case.
<site:source class="ConcatenateForms" /></div>
	</site:section>
	
	</site:chapter>

</site:page>
