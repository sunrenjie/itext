<?xml version="1.0" encoding="UTF-8" ?> 
<site:page
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:site="http://www.lowagie.com/iText/site" >
	<site:metadata>
		<site:title>Hello World</site:title>
		<site:summary>How-to generate a PDF document with iText in 5 easy steps.</site:summary>
		<site:keywords>PDF, JAVA, iText, examples, Lowagie, Bruno</site:keywords>
		<site:amazonbooks>
			<site:book asin="0321304748">PDF Reference (4th Edition)</site:book>
			<site:keyword>JAVA</site:keyword>
			<site:keyword>PDF</site:keyword>
		</site:amazonbooks>
		<site:updated>$Date$</site:updated>
		<site:author>Bruno Lowagie</site:author>
	</site:metadata>
	
	<site:examples>
		<site:example>
			<site:java src="HelloWorld" standalone="yes" />
			<site:result>HelloWorld.pdf</site:result>
			<site:description>Generates a simple 'Hello World' PDF file</site:description>
		</site:example>
		<site:example>
			<site:java src="DefaultPageSize" standalone="yes" />
			<site:result>DefaultPageSize.pdf</site:result>
			<site:description>Generates a PDF document with the default page size and some other predefined standard pagesizes</site:description>
		</site:example>
		<site:example>
			<site:java src="LandscapePortrait" standalone="yes" />
			<site:result>LandscapePortrait.pdf</site:result>
			<site:description>Generates a PDF document with the first page in Lanscape; the second page in Portrait</site:description>
		</site:example>
		<site:example>
			<site:java src="CustomPageSize" standalone="yes" />
			<site:result>CustomPageSize.pdf</site:result>
			<site:description>Generates a PDF document with a custom pagesize and backgroundcolor</site:description>
		</site:example>
		<site:example>
			<site:java src="Margins" standalone="yes" />
			<site:result>Margins.pdf</site:result>
			<site:description>Demonstrates the margin functionality</site:description>
		</site:example>
	</site:examples>
	
	<site:chapter>
	<site:section name="5steps">
		<site:sectiontitle>Creating a document in 5 steps.</site:sectiontitle>
<div>
When I learned my first programming language (some old BASIC dialect
on a <a href="http://www.99er.net/">TI-99/4A Home Compiter</a>),
one of the first programs I made was a 'Hello World' example.
The year was 1982, my age: 12. Now, more than 20 years later,
I am still writing the same program: a standalone example that
prints 'Hello World', this time not on the cyan colored Texas Instruments screen,
but in a PDF document file.<br />
This example shows you the 5 basic steps you have to take for every
new PDF document you are creating from scratch with iText:
<ul>
<li><b>Step 1:</b> Create an <site:doc class="com.lowagie.text.Document" target="constructor_summary">instance</site:doc> of <site:src class="com.lowagie.text.Document" />:
<div class="commandline"></div>Document document = new Document();</li>
<li><b>Step 2:</b> Create a Writer (for instance <site:src class="com.lowagie.text.pdf.PdfWriter" />) that listens to this document and writes the document to the OutputStream of your choice:
<div class="commandline">PdfWriter.getInstance(document, new FileOutputStream("Chap0101.pdf"));</div></li>
<li><b>Step 3:</b> Open the document:
<div class="commandline">document.open();</div></li>
<li><b>Step 4:</b> Add content to the document:
<div class="commandline">document.add(new Paragraph("Hello World"));</div></li>
<li><b>Step 5:</b> Closes the document:
<div class="commandline">document.close();</div></li>
</ul>
<site:source class="HelloWorld" />
In the following sections, we will take a closer look into each step.
</div>
	</site:section>
	
	<site:section name="step1">
		<site:sectiontitle>step 1: the Document object</site:sectiontitle>
<div>
Class <site:src class="com.lowagie.text.Document" /> has <site:doc class="com.lowagie.text.Document" target="constructor_summary">3 constructors</site:doc>:
<pre class="commandline">public Document();
public Document(Rectangle pageSize);
public Document(Rectangle pageSize,
   int marginLeft,
   int marginRight,
   int marginTop,
   int marginBottom);</pre>
The first constructor calls the second one, with <site:doc class="com.lowagie.text.PageSize" target="A4">PageSize.A4</site:doc> as parameter.
The second constructor calls the third one, with 36 as value for each margin.<br /><br />
<div class="subtitle">Pagesize</div>
The default PageSize is DIN A4 (iText is a European library; A4 is the most common format overhere),
but for your convenience class <site:src class="com.lowagie.text.PageSize" /> offers you a very complete list of standard PageSizes:
A0-A10, LEGAL, LETTER, HALFLETTER, _11x17, LEDGER, NOTE, B0-B5, ARCH_A-ARCH_E, FLSA and FLSE.
<site:source class="DefaultPageSize" />
Most these standard pageSizes are in PORTRAIT-format.
To create a document in landscape format, just make the height smaller than the width.
With the standard pagesizes all you have to do is <site:doc class="com.lowagie.text.Rectangle" target="rotate()">rotate()</site:doc> the Rectangle:
<div class="commandline">Document document = new Document(PageSize.A4.rotate());</div>
<site:source class="LandscapePortrait" />
Of course you aren't limited to this list. You can create pages of any size you want.
(Although there is a maximum of 200 by 200 inches; 45 by 45 inches for Acrobat 3.0 compatibility).
With the PageSize, there is also the possibility to define a backgroundcolor.
In the following example, we create a long, narrow document with a yellowish backgroundcolor:
<site:source class="CustomPageSize" />
If you want to know more about the measurement unit, see the <site:tutorial chapter="/general/faq" section="measurements">FAQ</site:tutorial>.<br /><br />
<div class="subtitle">Margins</div>
In step 4, you will be adding content to the document. If you use high level objects,
you needn't worry about margins and page layout. The high level objects take care of that
for you. Of course you will have to define the margins first. That is: if you want other
margins than the standard 36 points (half an inch).<br />
You can also change the margins while you are adding content. Remark that the changes
will only be noticed on the NEXT page. If you want the margins mirrored (odd and even pages),
you can do this with this method: <site:doc class="com.lowagie.text.Document" target="setMarginMirroring(boolean)">setMarginMirroring(true)</site:doc>.
<site:source class="Margins" />
If you want to know more about the measurement unit, see the <site:tutorial chapter="/general/faq" section="measurements">FAQ</site:tutorial>.
</div>
	</site:section>
	
	<site:section name="step2">
		<site:sectiontitle>step 2: the Writer object</site:sectiontitle>
		<div>
		</div>
	</site:section>
	
	<site:section name="step3">
		<site:sectiontitle>step 3: metadata + opening the document</site:sectiontitle>
		<div>
		</div>
	</site:section>
	
	<site:section name="step4">
		<site:sectiontitle>step 4: adding content</site:sectiontitle>
		<div>
There are different ways to add content to a PDF file.
The easiest way is to use <site:tutorial chapter="" section="part2">high level objects</site:tutorial>
such as Chunk, Phrase, Paragraph,...
It is very important to realize that not all types of these objects are supported
in all types of writers. For instance:  the <site:docs class="com.lowagie.text.pdf.PdfPTable">PdfPTable</site:docs>-object
is only supported in PDF, not in RTF or HTML. If you add a <site:docs class="com.lowagie.text.pdf.PdfPTable">PdfPTable</site:docs>
to a Document, the listening <site:docs class="com.lowagie.text.rtf.RtfWriter2">RtfWriter</site:docs>s or <site:docs class="com.lowagie.text.html.HtmlWriter">HtmlWriter</site:docs>s
will ignore this.<br />
If you don't need RTF or HTML, you can also add content at
<site:tutorial chapter="" section="part3">absolute positions</site:tutorial>.
A lot of the standard PDF syntax is supported in iText, so you can do some
very powerful things with the library.<br />
Adding content using the <site:docs class="com.lowagie.text.pdf.PdfGraphics2D">PdfGraphics2D</site:docs>-object
(extends <a href="http://java.sun.com/j2se/1.3/docs/api/java/awt/Graphics2D.html">java.awt.Graphics2D</a>) is
also possible. You can read more about this elsewhere in the tutorial.
		</div>
	</site:section>
	
	<site:section name="step5">
		<site:sectiontitle>step 5: closing the document</site:sectiontitle>
		<div>
 Closing the document is very important, because it flushes and closes the outputstream to which the writer is writing. The close-method is called in the finalize-method, but you shouldn't count on that. You should always close the document yourself!
		</div>
	</site:section>
	
	</site:chapter>

</site:page>